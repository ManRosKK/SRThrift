/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package SRBanking.ThriftInterface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NotEnoughMoney extends TException implements org.apache.thrift.TBase<NotEnoughMoney, NotEnoughMoney._Fields>, java.io.Serializable, Cloneable, Comparable<NotEnoughMoney> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("NotEnoughMoney");

  private static final org.apache.thrift.protocol.TField MONEY_AVAILABLE_FIELD_DESC = new org.apache.thrift.protocol.TField("moneyAvailable", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField MONEY_REQUESTED_FIELD_DESC = new org.apache.thrift.protocol.TField("moneyRequested", org.apache.thrift.protocol.TType.I64, (short)2);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new NotEnoughMoneyStandardSchemeFactory());
    schemes.put(TupleScheme.class, new NotEnoughMoneyTupleSchemeFactory());
  }

  public long moneyAvailable; // required
  public long moneyRequested; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    MONEY_AVAILABLE((short)1, "moneyAvailable"),
    MONEY_REQUESTED((short)2, "moneyRequested");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // MONEY_AVAILABLE
          return MONEY_AVAILABLE;
        case 2: // MONEY_REQUESTED
          return MONEY_REQUESTED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MONEYAVAILABLE_ISSET_ID = 0;
  private static final int __MONEYREQUESTED_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.MONEY_AVAILABLE, new org.apache.thrift.meta_data.FieldMetaData("moneyAvailable", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "AccountBalanceType")));
    tmpMap.put(_Fields.MONEY_REQUESTED, new org.apache.thrift.meta_data.FieldMetaData("moneyRequested", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "AccountBalanceType")));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(NotEnoughMoney.class, metaDataMap);
  }

  public NotEnoughMoney() {
  }

  public NotEnoughMoney(
    long moneyAvailable,
    long moneyRequested)
  {
    this();
    this.moneyAvailable = moneyAvailable;
    setMoneyAvailableIsSet(true);
    this.moneyRequested = moneyRequested;
    setMoneyRequestedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public NotEnoughMoney(NotEnoughMoney other) {
    __isset_bitfield = other.__isset_bitfield;
    this.moneyAvailable = other.moneyAvailable;
    this.moneyRequested = other.moneyRequested;
  }

  public NotEnoughMoney deepCopy() {
    return new NotEnoughMoney(this);
  }

  @Override
  public void clear() {
    setMoneyAvailableIsSet(false);
    this.moneyAvailable = 0;
    setMoneyRequestedIsSet(false);
    this.moneyRequested = 0;
  }

  public long getMoneyAvailable() {
    return this.moneyAvailable;
  }

  public NotEnoughMoney setMoneyAvailable(long moneyAvailable) {
    this.moneyAvailable = moneyAvailable;
    setMoneyAvailableIsSet(true);
    return this;
  }

  public void unsetMoneyAvailable() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEYAVAILABLE_ISSET_ID);
  }

  /** Returns true if field moneyAvailable is set (has been assigned a value) and false otherwise */
  public boolean isSetMoneyAvailable() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEYAVAILABLE_ISSET_ID);
  }

  public void setMoneyAvailableIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEYAVAILABLE_ISSET_ID, value);
  }

  public long getMoneyRequested() {
    return this.moneyRequested;
  }

  public NotEnoughMoney setMoneyRequested(long moneyRequested) {
    this.moneyRequested = moneyRequested;
    setMoneyRequestedIsSet(true);
    return this;
  }

  public void unsetMoneyRequested() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONEYREQUESTED_ISSET_ID);
  }

  /** Returns true if field moneyRequested is set (has been assigned a value) and false otherwise */
  public boolean isSetMoneyRequested() {
    return EncodingUtils.testBit(__isset_bitfield, __MONEYREQUESTED_ISSET_ID);
  }

  public void setMoneyRequestedIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONEYREQUESTED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case MONEY_AVAILABLE:
      if (value == null) {
        unsetMoneyAvailable();
      } else {
        setMoneyAvailable((Long)value);
      }
      break;

    case MONEY_REQUESTED:
      if (value == null) {
        unsetMoneyRequested();
      } else {
        setMoneyRequested((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case MONEY_AVAILABLE:
      return Long.valueOf(getMoneyAvailable());

    case MONEY_REQUESTED:
      return Long.valueOf(getMoneyRequested());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case MONEY_AVAILABLE:
      return isSetMoneyAvailable();
    case MONEY_REQUESTED:
      return isSetMoneyRequested();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof NotEnoughMoney)
      return this.equals((NotEnoughMoney)that);
    return false;
  }

  public boolean equals(NotEnoughMoney that) {
    if (that == null)
      return false;

    boolean this_present_moneyAvailable = true;
    boolean that_present_moneyAvailable = true;
    if (this_present_moneyAvailable || that_present_moneyAvailable) {
      if (!(this_present_moneyAvailable && that_present_moneyAvailable))
        return false;
      if (this.moneyAvailable != that.moneyAvailable)
        return false;
    }

    boolean this_present_moneyRequested = true;
    boolean that_present_moneyRequested = true;
    if (this_present_moneyRequested || that_present_moneyRequested) {
      if (!(this_present_moneyRequested && that_present_moneyRequested))
        return false;
      if (this.moneyRequested != that.moneyRequested)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(NotEnoughMoney other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetMoneyAvailable()).compareTo(other.isSetMoneyAvailable());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoneyAvailable()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moneyAvailable, other.moneyAvailable);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMoneyRequested()).compareTo(other.isSetMoneyRequested());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMoneyRequested()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.moneyRequested, other.moneyRequested);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("NotEnoughMoney(");
    boolean first = true;

    sb.append("moneyAvailable:");
    sb.append(this.moneyAvailable);
    first = false;
    if (!first) sb.append(", ");
    sb.append("moneyRequested:");
    sb.append(this.moneyRequested);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class NotEnoughMoneyStandardSchemeFactory implements SchemeFactory {
    public NotEnoughMoneyStandardScheme getScheme() {
      return new NotEnoughMoneyStandardScheme();
    }
  }

  private static class NotEnoughMoneyStandardScheme extends StandardScheme<NotEnoughMoney> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, NotEnoughMoney struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // MONEY_AVAILABLE
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.moneyAvailable = iprot.readI64();
              struct.setMoneyAvailableIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MONEY_REQUESTED
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.moneyRequested = iprot.readI64();
              struct.setMoneyRequestedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, NotEnoughMoney struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(MONEY_AVAILABLE_FIELD_DESC);
      oprot.writeI64(struct.moneyAvailable);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONEY_REQUESTED_FIELD_DESC);
      oprot.writeI64(struct.moneyRequested);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class NotEnoughMoneyTupleSchemeFactory implements SchemeFactory {
    public NotEnoughMoneyTupleScheme getScheme() {
      return new NotEnoughMoneyTupleScheme();
    }
  }

  private static class NotEnoughMoneyTupleScheme extends TupleScheme<NotEnoughMoney> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, NotEnoughMoney struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetMoneyAvailable()) {
        optionals.set(0);
      }
      if (struct.isSetMoneyRequested()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetMoneyAvailable()) {
        oprot.writeI64(struct.moneyAvailable);
      }
      if (struct.isSetMoneyRequested()) {
        oprot.writeI64(struct.moneyRequested);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, NotEnoughMoney struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        struct.moneyAvailable = iprot.readI64();
        struct.setMoneyAvailableIsSet(true);
      }
      if (incoming.get(1)) {
        struct.moneyRequested = iprot.readI64();
        struct.setMoneyRequestedIsSet(true);
      }
    }
  }

}

