/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package SRBanking.ThriftInterface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class NodeService {

  public interface Iface {

    /**
     * 
     * 
     * @param receiver
     * @param value
     */
    public void MakeTransfer(NodeID receiver, long value) throws org.apache.thrift.TException;

    /**
     * 
     */
    public long GetAccountBalance() throws org.apache.thrift.TException;

    /**
     * pings node
     */
    public void Ping() throws org.apache.thrift.TException;

    /**
     * pings Swarm and checks if leader is a leader
     * 
     * @param leader
     * @param transfer
     */
    public void PingSwarm(NodeID leader, TransferID transfer) throws NotSwarmMemeber, org.apache.thrift.TException;

    /**
     * 
     * 
     * @param swarm
     */
    public void UpdateSwarmMembers(Swarm swarm) throws NotSwarmMemeber, WrongSwarmLeader, org.apache.thrift.TException;

    /**
     * 
     * 
     * @param swarm
     */
    public void AddToSwarm(Swarm swarm) throws AlreadySwarmMemeber, org.apache.thrift.TException;

    /**
     * 
     * 
     * @param swarm
     */
    public void DelSwarm(Swarm swarm) throws NotSwarmMemeber, WrongSwarmLeader, org.apache.thrift.TException;

    /**
     * 
     * 
     * @param transfer
     */
    public Swarm GetSwarm(TransferID transfer) throws NotSwarmMemeber, org.apache.thrift.TException;

    /**
     * returns true if candidateNodeID> current
     * 
     * @param cadidate
     * @param Transfer
     */
    public boolean ElectSwarmLeader(NodeID cadidate, TransferID Transfer) throws NotSwarmMemeber, org.apache.thrift.TException;

    /**
     * new leader broadcast that he is a leader
     * 
     * @param swarm
     */
    public void ElectionEndedSwarm(Swarm swarm) throws NotSwarmMemeber, org.apache.thrift.TException;

    /**
     * 
     * 
     * @param transfer
     */
    public void DeliverTransfer(TransferData transfer) throws org.apache.thrift.TException;

    public List<Swarm> GetSwarmList() throws org.apache.thrift.TException;

    public void startSwarmElection(TransferID transfer) throws NotSwarmMemeber, org.apache.thrift.TException;

    public List<TransferData> GetTransfers() throws org.apache.thrift.TException;

    public void stop() throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void MakeTransfer(NodeID receiver, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetAccountBalance(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void Ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void PingSwarm(NodeID leader, TransferID transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void UpdateSwarmMembers(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void AddToSwarm(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DelSwarm(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetSwarm(TransferID transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ElectSwarmLeader(NodeID cadidate, TransferID Transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void ElectionEndedSwarm(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void DeliverTransfer(TransferData transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetSwarmList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void startSwarmElection(TransferID transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void GetTransfers(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

    public void stop(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public void MakeTransfer(NodeID receiver, long value) throws org.apache.thrift.TException
    {
      send_MakeTransfer(receiver, value);
      recv_MakeTransfer();
    }

    public void send_MakeTransfer(NodeID receiver, long value) throws org.apache.thrift.TException
    {
      MakeTransfer_args args = new MakeTransfer_args();
      args.setReceiver(receiver);
      args.setValue(value);
      sendBase("MakeTransfer", args);
    }

    public void recv_MakeTransfer() throws org.apache.thrift.TException
    {
      MakeTransfer_result result = new MakeTransfer_result();
      receiveBase(result, "MakeTransfer");
      return;
    }

    public long GetAccountBalance() throws org.apache.thrift.TException
    {
      send_GetAccountBalance();
      return recv_GetAccountBalance();
    }

    public void send_GetAccountBalance() throws org.apache.thrift.TException
    {
      GetAccountBalance_args args = new GetAccountBalance_args();
      sendBase("GetAccountBalance", args);
    }

    public long recv_GetAccountBalance() throws org.apache.thrift.TException
    {
      GetAccountBalance_result result = new GetAccountBalance_result();
      receiveBase(result, "GetAccountBalance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetAccountBalance failed: unknown result");
    }

    public void Ping() throws org.apache.thrift.TException
    {
      send_Ping();
      recv_Ping();
    }

    public void send_Ping() throws org.apache.thrift.TException
    {
      Ping_args args = new Ping_args();
      sendBase("Ping", args);
    }

    public void recv_Ping() throws org.apache.thrift.TException
    {
      Ping_result result = new Ping_result();
      receiveBase(result, "Ping");
      return;
    }

    public void PingSwarm(NodeID leader, TransferID transfer) throws NotSwarmMemeber, org.apache.thrift.TException
    {
      send_PingSwarm(leader, transfer);
      recv_PingSwarm();
    }

    public void send_PingSwarm(NodeID leader, TransferID transfer) throws org.apache.thrift.TException
    {
      PingSwarm_args args = new PingSwarm_args();
      args.setLeader(leader);
      args.setTransfer(transfer);
      sendBase("PingSwarm", args);
    }

    public void recv_PingSwarm() throws NotSwarmMemeber, org.apache.thrift.TException
    {
      PingSwarm_result result = new PingSwarm_result();
      receiveBase(result, "PingSwarm");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void UpdateSwarmMembers(Swarm swarm) throws NotSwarmMemeber, WrongSwarmLeader, org.apache.thrift.TException
    {
      send_UpdateSwarmMembers(swarm);
      recv_UpdateSwarmMembers();
    }

    public void send_UpdateSwarmMembers(Swarm swarm) throws org.apache.thrift.TException
    {
      UpdateSwarmMembers_args args = new UpdateSwarmMembers_args();
      args.setSwarm(swarm);
      sendBase("UpdateSwarmMembers", args);
    }

    public void recv_UpdateSwarmMembers() throws NotSwarmMemeber, WrongSwarmLeader, org.apache.thrift.TException
    {
      UpdateSwarmMembers_result result = new UpdateSwarmMembers_result();
      receiveBase(result, "UpdateSwarmMembers");
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.exc2 != null) {
        throw result.exc2;
      }
      return;
    }

    public void AddToSwarm(Swarm swarm) throws AlreadySwarmMemeber, org.apache.thrift.TException
    {
      send_AddToSwarm(swarm);
      recv_AddToSwarm();
    }

    public void send_AddToSwarm(Swarm swarm) throws org.apache.thrift.TException
    {
      AddToSwarm_args args = new AddToSwarm_args();
      args.setSwarm(swarm);
      sendBase("AddToSwarm", args);
    }

    public void recv_AddToSwarm() throws AlreadySwarmMemeber, org.apache.thrift.TException
    {
      AddToSwarm_result result = new AddToSwarm_result();
      receiveBase(result, "AddToSwarm");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void DelSwarm(Swarm swarm) throws NotSwarmMemeber, WrongSwarmLeader, org.apache.thrift.TException
    {
      send_DelSwarm(swarm);
      recv_DelSwarm();
    }

    public void send_DelSwarm(Swarm swarm) throws org.apache.thrift.TException
    {
      DelSwarm_args args = new DelSwarm_args();
      args.setSwarm(swarm);
      sendBase("DelSwarm", args);
    }

    public void recv_DelSwarm() throws NotSwarmMemeber, WrongSwarmLeader, org.apache.thrift.TException
    {
      DelSwarm_result result = new DelSwarm_result();
      receiveBase(result, "DelSwarm");
      if (result.exc != null) {
        throw result.exc;
      }
      if (result.exc2 != null) {
        throw result.exc2;
      }
      return;
    }

    public Swarm GetSwarm(TransferID transfer) throws NotSwarmMemeber, org.apache.thrift.TException
    {
      send_GetSwarm(transfer);
      return recv_GetSwarm();
    }

    public void send_GetSwarm(TransferID transfer) throws org.apache.thrift.TException
    {
      GetSwarm_args args = new GetSwarm_args();
      args.setTransfer(transfer);
      sendBase("GetSwarm", args);
    }

    public Swarm recv_GetSwarm() throws NotSwarmMemeber, org.apache.thrift.TException
    {
      GetSwarm_result result = new GetSwarm_result();
      receiveBase(result, "GetSwarm");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSwarm failed: unknown result");
    }

    public boolean ElectSwarmLeader(NodeID cadidate, TransferID Transfer) throws NotSwarmMemeber, org.apache.thrift.TException
    {
      send_ElectSwarmLeader(cadidate, Transfer);
      return recv_ElectSwarmLeader();
    }

    public void send_ElectSwarmLeader(NodeID cadidate, TransferID Transfer) throws org.apache.thrift.TException
    {
      ElectSwarmLeader_args args = new ElectSwarmLeader_args();
      args.setCadidate(cadidate);
      args.setTransfer(Transfer);
      sendBase("ElectSwarmLeader", args);
    }

    public boolean recv_ElectSwarmLeader() throws NotSwarmMemeber, org.apache.thrift.TException
    {
      ElectSwarmLeader_result result = new ElectSwarmLeader_result();
      receiveBase(result, "ElectSwarmLeader");
      if (result.isSetSuccess()) {
        return result.success;
      }
      if (result.exc != null) {
        throw result.exc;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "ElectSwarmLeader failed: unknown result");
    }

    public void ElectionEndedSwarm(Swarm swarm) throws NotSwarmMemeber, org.apache.thrift.TException
    {
      send_ElectionEndedSwarm(swarm);
      recv_ElectionEndedSwarm();
    }

    public void send_ElectionEndedSwarm(Swarm swarm) throws org.apache.thrift.TException
    {
      ElectionEndedSwarm_args args = new ElectionEndedSwarm_args();
      args.setSwarm(swarm);
      sendBase("ElectionEndedSwarm", args);
    }

    public void recv_ElectionEndedSwarm() throws NotSwarmMemeber, org.apache.thrift.TException
    {
      ElectionEndedSwarm_result result = new ElectionEndedSwarm_result();
      receiveBase(result, "ElectionEndedSwarm");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public void DeliverTransfer(TransferData transfer) throws org.apache.thrift.TException
    {
      send_DeliverTransfer(transfer);
      recv_DeliverTransfer();
    }

    public void send_DeliverTransfer(TransferData transfer) throws org.apache.thrift.TException
    {
      DeliverTransfer_args args = new DeliverTransfer_args();
      args.setTransfer(transfer);
      sendBase("DeliverTransfer", args);
    }

    public void recv_DeliverTransfer() throws org.apache.thrift.TException
    {
      DeliverTransfer_result result = new DeliverTransfer_result();
      receiveBase(result, "DeliverTransfer");
      return;
    }

    public List<Swarm> GetSwarmList() throws org.apache.thrift.TException
    {
      send_GetSwarmList();
      return recv_GetSwarmList();
    }

    public void send_GetSwarmList() throws org.apache.thrift.TException
    {
      GetSwarmList_args args = new GetSwarmList_args();
      sendBase("GetSwarmList", args);
    }

    public List<Swarm> recv_GetSwarmList() throws org.apache.thrift.TException
    {
      GetSwarmList_result result = new GetSwarmList_result();
      receiveBase(result, "GetSwarmList");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetSwarmList failed: unknown result");
    }

    public void startSwarmElection(TransferID transfer) throws NotSwarmMemeber, org.apache.thrift.TException
    {
      send_startSwarmElection(transfer);
      recv_startSwarmElection();
    }

    public void send_startSwarmElection(TransferID transfer) throws org.apache.thrift.TException
    {
      startSwarmElection_args args = new startSwarmElection_args();
      args.setTransfer(transfer);
      sendBase("startSwarmElection", args);
    }

    public void recv_startSwarmElection() throws NotSwarmMemeber, org.apache.thrift.TException
    {
      startSwarmElection_result result = new startSwarmElection_result();
      receiveBase(result, "startSwarmElection");
      if (result.exc != null) {
        throw result.exc;
      }
      return;
    }

    public List<TransferData> GetTransfers() throws org.apache.thrift.TException
    {
      send_GetTransfers();
      return recv_GetTransfers();
    }

    public void send_GetTransfers() throws org.apache.thrift.TException
    {
      GetTransfers_args args = new GetTransfers_args();
      sendBase("GetTransfers", args);
    }

    public List<TransferData> recv_GetTransfers() throws org.apache.thrift.TException
    {
      GetTransfers_result result = new GetTransfers_result();
      receiveBase(result, "GetTransfers");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "GetTransfers failed: unknown result");
    }

    public void stop() throws org.apache.thrift.TException
    {
      send_stop();
      recv_stop();
    }

    public void send_stop() throws org.apache.thrift.TException
    {
      stop_args args = new stop_args();
      sendBase("stop", args);
    }

    public void recv_stop() throws org.apache.thrift.TException
    {
      stop_result result = new stop_result();
      receiveBase(result, "stop");
      return;
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void MakeTransfer(NodeID receiver, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      MakeTransfer_call method_call = new MakeTransfer_call(receiver, value, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class MakeTransfer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private NodeID receiver;
      private long value;
      public MakeTransfer_call(NodeID receiver, long value, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.receiver = receiver;
        this.value = value;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("MakeTransfer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        MakeTransfer_args args = new MakeTransfer_args();
        args.setReceiver(receiver);
        args.setValue(value);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_MakeTransfer();
      }
    }

    public void GetAccountBalance(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetAccountBalance_call method_call = new GetAccountBalance_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetAccountBalance_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetAccountBalance_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetAccountBalance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetAccountBalance_args args = new GetAccountBalance_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public long getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetAccountBalance();
      }
    }

    public void Ping(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      Ping_call method_call = new Ping_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class Ping_call extends org.apache.thrift.async.TAsyncMethodCall {
      public Ping_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("Ping", org.apache.thrift.protocol.TMessageType.CALL, 0));
        Ping_args args = new Ping_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_Ping();
      }
    }

    public void PingSwarm(NodeID leader, TransferID transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      PingSwarm_call method_call = new PingSwarm_call(leader, transfer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class PingSwarm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private NodeID leader;
      private TransferID transfer;
      public PingSwarm_call(NodeID leader, TransferID transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.leader = leader;
        this.transfer = transfer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("PingSwarm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        PingSwarm_args args = new PingSwarm_args();
        args.setLeader(leader);
        args.setTransfer(transfer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws NotSwarmMemeber, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_PingSwarm();
      }
    }

    public void UpdateSwarmMembers(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      UpdateSwarmMembers_call method_call = new UpdateSwarmMembers_call(swarm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class UpdateSwarmMembers_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Swarm swarm;
      public UpdateSwarmMembers_call(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.swarm = swarm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("UpdateSwarmMembers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        UpdateSwarmMembers_args args = new UpdateSwarmMembers_args();
        args.setSwarm(swarm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws NotSwarmMemeber, WrongSwarmLeader, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_UpdateSwarmMembers();
      }
    }

    public void AddToSwarm(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      AddToSwarm_call method_call = new AddToSwarm_call(swarm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class AddToSwarm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Swarm swarm;
      public AddToSwarm_call(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.swarm = swarm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("AddToSwarm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        AddToSwarm_args args = new AddToSwarm_args();
        args.setSwarm(swarm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws AlreadySwarmMemeber, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_AddToSwarm();
      }
    }

    public void DelSwarm(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DelSwarm_call method_call = new DelSwarm_call(swarm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DelSwarm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Swarm swarm;
      public DelSwarm_call(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.swarm = swarm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DelSwarm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DelSwarm_args args = new DelSwarm_args();
        args.setSwarm(swarm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws NotSwarmMemeber, WrongSwarmLeader, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DelSwarm();
      }
    }

    public void GetSwarm(TransferID transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSwarm_call method_call = new GetSwarm_call(transfer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSwarm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TransferID transfer;
      public GetSwarm_call(TransferID transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transfer = transfer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSwarm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSwarm_args args = new GetSwarm_args();
        args.setTransfer(transfer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public Swarm getResult() throws NotSwarmMemeber, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSwarm();
      }
    }

    public void ElectSwarmLeader(NodeID cadidate, TransferID Transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ElectSwarmLeader_call method_call = new ElectSwarmLeader_call(cadidate, Transfer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ElectSwarmLeader_call extends org.apache.thrift.async.TAsyncMethodCall {
      private NodeID cadidate;
      private TransferID Transfer;
      public ElectSwarmLeader_call(NodeID cadidate, TransferID Transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cadidate = cadidate;
        this.Transfer = Transfer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ElectSwarmLeader", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ElectSwarmLeader_args args = new ElectSwarmLeader_args();
        args.setCadidate(cadidate);
        args.setTransfer(Transfer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public boolean getResult() throws NotSwarmMemeber, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_ElectSwarmLeader();
      }
    }

    public void ElectionEndedSwarm(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      ElectionEndedSwarm_call method_call = new ElectionEndedSwarm_call(swarm, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class ElectionEndedSwarm_call extends org.apache.thrift.async.TAsyncMethodCall {
      private Swarm swarm;
      public ElectionEndedSwarm_call(Swarm swarm, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.swarm = swarm;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("ElectionEndedSwarm", org.apache.thrift.protocol.TMessageType.CALL, 0));
        ElectionEndedSwarm_args args = new ElectionEndedSwarm_args();
        args.setSwarm(swarm);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws NotSwarmMemeber, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_ElectionEndedSwarm();
      }
    }

    public void DeliverTransfer(TransferData transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      DeliverTransfer_call method_call = new DeliverTransfer_call(transfer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class DeliverTransfer_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TransferData transfer;
      public DeliverTransfer_call(TransferData transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transfer = transfer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("DeliverTransfer", org.apache.thrift.protocol.TMessageType.CALL, 0));
        DeliverTransfer_args args = new DeliverTransfer_args();
        args.setTransfer(transfer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_DeliverTransfer();
      }
    }

    public void GetSwarmList(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetSwarmList_call method_call = new GetSwarmList_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetSwarmList_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetSwarmList_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetSwarmList", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetSwarmList_args args = new GetSwarmList_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<Swarm> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetSwarmList();
      }
    }

    public void startSwarmElection(TransferID transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      startSwarmElection_call method_call = new startSwarmElection_call(transfer, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class startSwarmElection_call extends org.apache.thrift.async.TAsyncMethodCall {
      private TransferID transfer;
      public startSwarmElection_call(TransferID transfer, org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.transfer = transfer;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("startSwarmElection", org.apache.thrift.protocol.TMessageType.CALL, 0));
        startSwarmElection_args args = new startSwarmElection_args();
        args.setTransfer(transfer);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws NotSwarmMemeber, org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_startSwarmElection();
      }
    }

    public void GetTransfers(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      GetTransfers_call method_call = new GetTransfers_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class GetTransfers_call extends org.apache.thrift.async.TAsyncMethodCall {
      public GetTransfers_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("GetTransfers", org.apache.thrift.protocol.TMessageType.CALL, 0));
        GetTransfers_args args = new GetTransfers_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public List<TransferData> getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_GetTransfers();
      }
    }

    public void stop(org.apache.thrift.async.AsyncMethodCallback resultHandler) throws org.apache.thrift.TException {
      checkReady();
      stop_call method_call = new stop_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class stop_call extends org.apache.thrift.async.TAsyncMethodCall {
      public stop_call(org.apache.thrift.async.AsyncMethodCallback resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("stop", org.apache.thrift.protocol.TMessageType.CALL, 0));
        stop_args args = new stop_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public void getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        (new Client(prot)).recv_stop();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final Logger LOGGER = LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> getProcessMap(Map<String,  org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("MakeTransfer", new MakeTransfer());
      processMap.put("GetAccountBalance", new GetAccountBalance());
      processMap.put("Ping", new Ping());
      processMap.put("PingSwarm", new PingSwarm());
      processMap.put("UpdateSwarmMembers", new UpdateSwarmMembers());
      processMap.put("AddToSwarm", new AddToSwarm());
      processMap.put("DelSwarm", new DelSwarm());
      processMap.put("GetSwarm", new GetSwarm());
      processMap.put("ElectSwarmLeader", new ElectSwarmLeader());
      processMap.put("ElectionEndedSwarm", new ElectionEndedSwarm());
      processMap.put("DeliverTransfer", new DeliverTransfer());
      processMap.put("GetSwarmList", new GetSwarmList());
      processMap.put("startSwarmElection", new startSwarmElection());
      processMap.put("GetTransfers", new GetTransfers());
      processMap.put("stop", new stop());
      return processMap;
    }

    public static class MakeTransfer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, MakeTransfer_args> {
      public MakeTransfer() {
        super("MakeTransfer");
      }

      public MakeTransfer_args getEmptyArgsInstance() {
        return new MakeTransfer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public MakeTransfer_result getResult(I iface, MakeTransfer_args args) throws org.apache.thrift.TException {
        MakeTransfer_result result = new MakeTransfer_result();
        iface.MakeTransfer(args.receiver, args.value);
        return result;
      }
    }

    public static class GetAccountBalance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetAccountBalance_args> {
      public GetAccountBalance() {
        super("GetAccountBalance");
      }

      public GetAccountBalance_args getEmptyArgsInstance() {
        return new GetAccountBalance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetAccountBalance_result getResult(I iface, GetAccountBalance_args args) throws org.apache.thrift.TException {
        GetAccountBalance_result result = new GetAccountBalance_result();
        result.success = iface.GetAccountBalance();
        result.setSuccessIsSet(true);
        return result;
      }
    }

    public static class Ping<I extends Iface> extends org.apache.thrift.ProcessFunction<I, Ping_args> {
      public Ping() {
        super("Ping");
      }

      public Ping_args getEmptyArgsInstance() {
        return new Ping_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public Ping_result getResult(I iface, Ping_args args) throws org.apache.thrift.TException {
        Ping_result result = new Ping_result();
        iface.Ping();
        return result;
      }
    }

    public static class PingSwarm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, PingSwarm_args> {
      public PingSwarm() {
        super("PingSwarm");
      }

      public PingSwarm_args getEmptyArgsInstance() {
        return new PingSwarm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public PingSwarm_result getResult(I iface, PingSwarm_args args) throws org.apache.thrift.TException {
        PingSwarm_result result = new PingSwarm_result();
        try {
          iface.PingSwarm(args.leader, args.transfer);
        } catch (NotSwarmMemeber exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class UpdateSwarmMembers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, UpdateSwarmMembers_args> {
      public UpdateSwarmMembers() {
        super("UpdateSwarmMembers");
      }

      public UpdateSwarmMembers_args getEmptyArgsInstance() {
        return new UpdateSwarmMembers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public UpdateSwarmMembers_result getResult(I iface, UpdateSwarmMembers_args args) throws org.apache.thrift.TException {
        UpdateSwarmMembers_result result = new UpdateSwarmMembers_result();
        try {
          iface.UpdateSwarmMembers(args.swarm);
        } catch (NotSwarmMemeber exc) {
          result.exc = exc;
        } catch (WrongSwarmLeader exc2) {
          result.exc2 = exc2;
        }
        return result;
      }
    }

    public static class AddToSwarm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, AddToSwarm_args> {
      public AddToSwarm() {
        super("AddToSwarm");
      }

      public AddToSwarm_args getEmptyArgsInstance() {
        return new AddToSwarm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public AddToSwarm_result getResult(I iface, AddToSwarm_args args) throws org.apache.thrift.TException {
        AddToSwarm_result result = new AddToSwarm_result();
        try {
          iface.AddToSwarm(args.swarm);
        } catch (AlreadySwarmMemeber exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class DelSwarm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DelSwarm_args> {
      public DelSwarm() {
        super("DelSwarm");
      }

      public DelSwarm_args getEmptyArgsInstance() {
        return new DelSwarm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DelSwarm_result getResult(I iface, DelSwarm_args args) throws org.apache.thrift.TException {
        DelSwarm_result result = new DelSwarm_result();
        try {
          iface.DelSwarm(args.swarm);
        } catch (NotSwarmMemeber exc) {
          result.exc = exc;
        } catch (WrongSwarmLeader exc2) {
          result.exc2 = exc2;
        }
        return result;
      }
    }

    public static class GetSwarm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSwarm_args> {
      public GetSwarm() {
        super("GetSwarm");
      }

      public GetSwarm_args getEmptyArgsInstance() {
        return new GetSwarm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetSwarm_result getResult(I iface, GetSwarm_args args) throws org.apache.thrift.TException {
        GetSwarm_result result = new GetSwarm_result();
        try {
          result.success = iface.GetSwarm(args.transfer);
        } catch (NotSwarmMemeber exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class ElectSwarmLeader<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ElectSwarmLeader_args> {
      public ElectSwarmLeader() {
        super("ElectSwarmLeader");
      }

      public ElectSwarmLeader_args getEmptyArgsInstance() {
        return new ElectSwarmLeader_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ElectSwarmLeader_result getResult(I iface, ElectSwarmLeader_args args) throws org.apache.thrift.TException {
        ElectSwarmLeader_result result = new ElectSwarmLeader_result();
        try {
          result.success = iface.ElectSwarmLeader(args.cadidate, args.Transfer);
          result.setSuccessIsSet(true);
        } catch (NotSwarmMemeber exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class ElectionEndedSwarm<I extends Iface> extends org.apache.thrift.ProcessFunction<I, ElectionEndedSwarm_args> {
      public ElectionEndedSwarm() {
        super("ElectionEndedSwarm");
      }

      public ElectionEndedSwarm_args getEmptyArgsInstance() {
        return new ElectionEndedSwarm_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public ElectionEndedSwarm_result getResult(I iface, ElectionEndedSwarm_args args) throws org.apache.thrift.TException {
        ElectionEndedSwarm_result result = new ElectionEndedSwarm_result();
        try {
          iface.ElectionEndedSwarm(args.swarm);
        } catch (NotSwarmMemeber exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class DeliverTransfer<I extends Iface> extends org.apache.thrift.ProcessFunction<I, DeliverTransfer_args> {
      public DeliverTransfer() {
        super("DeliverTransfer");
      }

      public DeliverTransfer_args getEmptyArgsInstance() {
        return new DeliverTransfer_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public DeliverTransfer_result getResult(I iface, DeliverTransfer_args args) throws org.apache.thrift.TException {
        DeliverTransfer_result result = new DeliverTransfer_result();
        iface.DeliverTransfer(args.transfer);
        return result;
      }
    }

    public static class GetSwarmList<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetSwarmList_args> {
      public GetSwarmList() {
        super("GetSwarmList");
      }

      public GetSwarmList_args getEmptyArgsInstance() {
        return new GetSwarmList_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetSwarmList_result getResult(I iface, GetSwarmList_args args) throws org.apache.thrift.TException {
        GetSwarmList_result result = new GetSwarmList_result();
        result.success = iface.GetSwarmList();
        return result;
      }
    }

    public static class startSwarmElection<I extends Iface> extends org.apache.thrift.ProcessFunction<I, startSwarmElection_args> {
      public startSwarmElection() {
        super("startSwarmElection");
      }

      public startSwarmElection_args getEmptyArgsInstance() {
        return new startSwarmElection_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public startSwarmElection_result getResult(I iface, startSwarmElection_args args) throws org.apache.thrift.TException {
        startSwarmElection_result result = new startSwarmElection_result();
        try {
          iface.startSwarmElection(args.transfer);
        } catch (NotSwarmMemeber exc) {
          result.exc = exc;
        }
        return result;
      }
    }

    public static class GetTransfers<I extends Iface> extends org.apache.thrift.ProcessFunction<I, GetTransfers_args> {
      public GetTransfers() {
        super("GetTransfers");
      }

      public GetTransfers_args getEmptyArgsInstance() {
        return new GetTransfers_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public GetTransfers_result getResult(I iface, GetTransfers_args args) throws org.apache.thrift.TException {
        GetTransfers_result result = new GetTransfers_result();
        result.success = iface.GetTransfers();
        return result;
      }
    }

    public static class stop<I extends Iface> extends org.apache.thrift.ProcessFunction<I, stop_args> {
      public stop() {
        super("stop");
      }

      public stop_args getEmptyArgsInstance() {
        return new stop_args();
      }

      protected boolean isOneway() {
        return false;
      }

      public stop_result getResult(I iface, stop_args args) throws org.apache.thrift.TException {
        stop_result result = new stop_result();
        iface.stop();
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final Logger LOGGER = LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new HashMap<String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(Map<String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("MakeTransfer", new MakeTransfer());
      processMap.put("GetAccountBalance", new GetAccountBalance());
      processMap.put("Ping", new Ping());
      processMap.put("PingSwarm", new PingSwarm());
      processMap.put("UpdateSwarmMembers", new UpdateSwarmMembers());
      processMap.put("AddToSwarm", new AddToSwarm());
      processMap.put("DelSwarm", new DelSwarm());
      processMap.put("GetSwarm", new GetSwarm());
      processMap.put("ElectSwarmLeader", new ElectSwarmLeader());
      processMap.put("ElectionEndedSwarm", new ElectionEndedSwarm());
      processMap.put("DeliverTransfer", new DeliverTransfer());
      processMap.put("GetSwarmList", new GetSwarmList());
      processMap.put("startSwarmElection", new startSwarmElection());
      processMap.put("GetTransfers", new GetTransfers());
      processMap.put("stop", new stop());
      return processMap;
    }

    public static class MakeTransfer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, MakeTransfer_args, Void> {
      public MakeTransfer() {
        super("MakeTransfer");
      }

      public MakeTransfer_args getEmptyArgsInstance() {
        return new MakeTransfer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            MakeTransfer_result result = new MakeTransfer_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            MakeTransfer_result result = new MakeTransfer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, MakeTransfer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.MakeTransfer(args.receiver, args.value,resultHandler);
      }
    }

    public static class GetAccountBalance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetAccountBalance_args, Long> {
      public GetAccountBalance() {
        super("GetAccountBalance");
      }

      public GetAccountBalance_args getEmptyArgsInstance() {
        return new GetAccountBalance_args();
      }

      public AsyncMethodCallback<Long> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Long>() { 
          public void onComplete(Long o) {
            GetAccountBalance_result result = new GetAccountBalance_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetAccountBalance_result result = new GetAccountBalance_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetAccountBalance_args args, org.apache.thrift.async.AsyncMethodCallback<Long> resultHandler) throws TException {
        iface.GetAccountBalance(resultHandler);
      }
    }

    public static class Ping<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, Ping_args, Void> {
      public Ping() {
        super("Ping");
      }

      public Ping_args getEmptyArgsInstance() {
        return new Ping_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            Ping_result result = new Ping_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            Ping_result result = new Ping_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, Ping_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.Ping(resultHandler);
      }
    }

    public static class PingSwarm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, PingSwarm_args, Void> {
      public PingSwarm() {
        super("PingSwarm");
      }

      public PingSwarm_args getEmptyArgsInstance() {
        return new PingSwarm_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            PingSwarm_result result = new PingSwarm_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            PingSwarm_result result = new PingSwarm_result();
            if (e instanceof NotSwarmMemeber) {
                        result.exc = (NotSwarmMemeber) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, PingSwarm_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.PingSwarm(args.leader, args.transfer,resultHandler);
      }
    }

    public static class UpdateSwarmMembers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, UpdateSwarmMembers_args, Void> {
      public UpdateSwarmMembers() {
        super("UpdateSwarmMembers");
      }

      public UpdateSwarmMembers_args getEmptyArgsInstance() {
        return new UpdateSwarmMembers_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            UpdateSwarmMembers_result result = new UpdateSwarmMembers_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            UpdateSwarmMembers_result result = new UpdateSwarmMembers_result();
            if (e instanceof NotSwarmMemeber) {
                        result.exc = (NotSwarmMemeber) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
            else             if (e instanceof WrongSwarmLeader) {
                        result.exc2 = (WrongSwarmLeader) e;
                        result.setExc2IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, UpdateSwarmMembers_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.UpdateSwarmMembers(args.swarm,resultHandler);
      }
    }

    public static class AddToSwarm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, AddToSwarm_args, Void> {
      public AddToSwarm() {
        super("AddToSwarm");
      }

      public AddToSwarm_args getEmptyArgsInstance() {
        return new AddToSwarm_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            AddToSwarm_result result = new AddToSwarm_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            AddToSwarm_result result = new AddToSwarm_result();
            if (e instanceof AlreadySwarmMemeber) {
                        result.exc = (AlreadySwarmMemeber) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, AddToSwarm_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.AddToSwarm(args.swarm,resultHandler);
      }
    }

    public static class DelSwarm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DelSwarm_args, Void> {
      public DelSwarm() {
        super("DelSwarm");
      }

      public DelSwarm_args getEmptyArgsInstance() {
        return new DelSwarm_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DelSwarm_result result = new DelSwarm_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DelSwarm_result result = new DelSwarm_result();
            if (e instanceof NotSwarmMemeber) {
                        result.exc = (NotSwarmMemeber) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
            else             if (e instanceof WrongSwarmLeader) {
                        result.exc2 = (WrongSwarmLeader) e;
                        result.setExc2IsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DelSwarm_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DelSwarm(args.swarm,resultHandler);
      }
    }

    public static class GetSwarm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetSwarm_args, Swarm> {
      public GetSwarm() {
        super("GetSwarm");
      }

      public GetSwarm_args getEmptyArgsInstance() {
        return new GetSwarm_args();
      }

      public AsyncMethodCallback<Swarm> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Swarm>() { 
          public void onComplete(Swarm o) {
            GetSwarm_result result = new GetSwarm_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetSwarm_result result = new GetSwarm_result();
            if (e instanceof NotSwarmMemeber) {
                        result.exc = (NotSwarmMemeber) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetSwarm_args args, org.apache.thrift.async.AsyncMethodCallback<Swarm> resultHandler) throws TException {
        iface.GetSwarm(args.transfer,resultHandler);
      }
    }

    public static class ElectSwarmLeader<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ElectSwarmLeader_args, Boolean> {
      public ElectSwarmLeader() {
        super("ElectSwarmLeader");
      }

      public ElectSwarmLeader_args getEmptyArgsInstance() {
        return new ElectSwarmLeader_args();
      }

      public AsyncMethodCallback<Boolean> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Boolean>() { 
          public void onComplete(Boolean o) {
            ElectSwarmLeader_result result = new ElectSwarmLeader_result();
            result.success = o;
            result.setSuccessIsSet(true);
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ElectSwarmLeader_result result = new ElectSwarmLeader_result();
            if (e instanceof NotSwarmMemeber) {
                        result.exc = (NotSwarmMemeber) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ElectSwarmLeader_args args, org.apache.thrift.async.AsyncMethodCallback<Boolean> resultHandler) throws TException {
        iface.ElectSwarmLeader(args.cadidate, args.Transfer,resultHandler);
      }
    }

    public static class ElectionEndedSwarm<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, ElectionEndedSwarm_args, Void> {
      public ElectionEndedSwarm() {
        super("ElectionEndedSwarm");
      }

      public ElectionEndedSwarm_args getEmptyArgsInstance() {
        return new ElectionEndedSwarm_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            ElectionEndedSwarm_result result = new ElectionEndedSwarm_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            ElectionEndedSwarm_result result = new ElectionEndedSwarm_result();
            if (e instanceof NotSwarmMemeber) {
                        result.exc = (NotSwarmMemeber) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, ElectionEndedSwarm_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.ElectionEndedSwarm(args.swarm,resultHandler);
      }
    }

    public static class DeliverTransfer<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, DeliverTransfer_args, Void> {
      public DeliverTransfer() {
        super("DeliverTransfer");
      }

      public DeliverTransfer_args getEmptyArgsInstance() {
        return new DeliverTransfer_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            DeliverTransfer_result result = new DeliverTransfer_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            DeliverTransfer_result result = new DeliverTransfer_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, DeliverTransfer_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.DeliverTransfer(args.transfer,resultHandler);
      }
    }

    public static class GetSwarmList<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetSwarmList_args, List<Swarm>> {
      public GetSwarmList() {
        super("GetSwarmList");
      }

      public GetSwarmList_args getEmptyArgsInstance() {
        return new GetSwarmList_args();
      }

      public AsyncMethodCallback<List<Swarm>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<Swarm>>() { 
          public void onComplete(List<Swarm> o) {
            GetSwarmList_result result = new GetSwarmList_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetSwarmList_result result = new GetSwarmList_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetSwarmList_args args, org.apache.thrift.async.AsyncMethodCallback<List<Swarm>> resultHandler) throws TException {
        iface.GetSwarmList(resultHandler);
      }
    }

    public static class startSwarmElection<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, startSwarmElection_args, Void> {
      public startSwarmElection() {
        super("startSwarmElection");
      }

      public startSwarmElection_args getEmptyArgsInstance() {
        return new startSwarmElection_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            startSwarmElection_result result = new startSwarmElection_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            startSwarmElection_result result = new startSwarmElection_result();
            if (e instanceof NotSwarmMemeber) {
                        result.exc = (NotSwarmMemeber) e;
                        result.setExcIsSet(true);
                        msg = result;
            }
             else 
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, startSwarmElection_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.startSwarmElection(args.transfer,resultHandler);
      }
    }

    public static class GetTransfers<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, GetTransfers_args, List<TransferData>> {
      public GetTransfers() {
        super("GetTransfers");
      }

      public GetTransfers_args getEmptyArgsInstance() {
        return new GetTransfers_args();
      }

      public AsyncMethodCallback<List<TransferData>> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<List<TransferData>>() { 
          public void onComplete(List<TransferData> o) {
            GetTransfers_result result = new GetTransfers_result();
            result.success = o;
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            GetTransfers_result result = new GetTransfers_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, GetTransfers_args args, org.apache.thrift.async.AsyncMethodCallback<List<TransferData>> resultHandler) throws TException {
        iface.GetTransfers(resultHandler);
      }
    }

    public static class stop<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, stop_args, Void> {
      public stop() {
        super("stop");
      }

      public stop_args getEmptyArgsInstance() {
        return new stop_args();
      }

      public AsyncMethodCallback<Void> getResultHandler(final AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new AsyncMethodCallback<Void>() { 
          public void onComplete(Void o) {
            stop_result result = new stop_result();
            try {
              fcall.sendResponse(fb,result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
              return;
            } catch (Exception e) {
              LOGGER.error("Exception writing to internal frame buffer", e);
            }
            fb.close();
          }
          public void onError(Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TBase msg;
            stop_result result = new stop_result();
            {
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TBase)new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
              return;
            } catch (Exception ex) {
              LOGGER.error("Exception writing to internal frame buffer", ex);
            }
            fb.close();
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, stop_args args, org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws TException {
        iface.stop(resultHandler);
      }
    }

  }

  public static class MakeTransfer_args implements org.apache.thrift.TBase<MakeTransfer_args, MakeTransfer_args._Fields>, java.io.Serializable, Cloneable, Comparable<MakeTransfer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MakeTransfer_args");

    private static final org.apache.thrift.protocol.TField RECEIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("receiver", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField VALUE_FIELD_DESC = new org.apache.thrift.protocol.TField("value", org.apache.thrift.protocol.TType.I64, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new MakeTransfer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new MakeTransfer_argsTupleSchemeFactory());
    }

    public NodeID receiver; // required
    public long value; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RECEIVER((short)1, "receiver"),
      VALUE((short)2, "value");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RECEIVER
            return RECEIVER;
          case 2: // VALUE
            return VALUE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __VALUE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RECEIVER, new org.apache.thrift.meta_data.FieldMetaData("receiver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeID.class)));
      tmpMap.put(_Fields.VALUE, new org.apache.thrift.meta_data.FieldMetaData("value", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "AccountBalanceType")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MakeTransfer_args.class, metaDataMap);
    }

    public MakeTransfer_args() {
    }

    public MakeTransfer_args(
      NodeID receiver,
      long value)
    {
      this();
      this.receiver = receiver;
      this.value = value;
      setValueIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MakeTransfer_args(MakeTransfer_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetReceiver()) {
        this.receiver = new NodeID(other.receiver);
      }
      this.value = other.value;
    }

    public MakeTransfer_args deepCopy() {
      return new MakeTransfer_args(this);
    }

    @Override
    public void clear() {
      this.receiver = null;
      setValueIsSet(false);
      this.value = 0;
    }

    public NodeID getReceiver() {
      return this.receiver;
    }

    public MakeTransfer_args setReceiver(NodeID receiver) {
      this.receiver = receiver;
      return this;
    }

    public void unsetReceiver() {
      this.receiver = null;
    }

    /** Returns true if field receiver is set (has been assigned a value) and false otherwise */
    public boolean isSetReceiver() {
      return this.receiver != null;
    }

    public void setReceiverIsSet(boolean value) {
      if (!value) {
        this.receiver = null;
      }
    }

    public long getValue() {
      return this.value;
    }

    public MakeTransfer_args setValue(long value) {
      this.value = value;
      setValueIsSet(true);
      return this;
    }

    public void unsetValue() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    /** Returns true if field value is set (has been assigned a value) and false otherwise */
    public boolean isSetValue() {
      return EncodingUtils.testBit(__isset_bitfield, __VALUE_ISSET_ID);
    }

    public void setValueIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __VALUE_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case RECEIVER:
        if (value == null) {
          unsetReceiver();
        } else {
          setReceiver((NodeID)value);
        }
        break;

      case VALUE:
        if (value == null) {
          unsetValue();
        } else {
          setValue((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case RECEIVER:
        return getReceiver();

      case VALUE:
        return Long.valueOf(getValue());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case RECEIVER:
        return isSetReceiver();
      case VALUE:
        return isSetValue();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof MakeTransfer_args)
        return this.equals((MakeTransfer_args)that);
      return false;
    }

    public boolean equals(MakeTransfer_args that) {
      if (that == null)
        return false;

      boolean this_present_receiver = true && this.isSetReceiver();
      boolean that_present_receiver = true && that.isSetReceiver();
      if (this_present_receiver || that_present_receiver) {
        if (!(this_present_receiver && that_present_receiver))
          return false;
        if (!this.receiver.equals(that.receiver))
          return false;
      }

      boolean this_present_value = true;
      boolean that_present_value = true;
      if (this_present_value || that_present_value) {
        if (!(this_present_value && that_present_value))
          return false;
        if (this.value != that.value)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(MakeTransfer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetReceiver()).compareTo(other.isSetReceiver());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReceiver()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.receiver, other.receiver);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetValue()).compareTo(other.isSetValue());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetValue()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.value, other.value);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("MakeTransfer_args(");
      boolean first = true;

      sb.append("receiver:");
      if (this.receiver == null) {
        sb.append("null");
      } else {
        sb.append(this.receiver);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("value:");
      sb.append(this.value);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (receiver != null) {
        receiver.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MakeTransfer_argsStandardSchemeFactory implements SchemeFactory {
      public MakeTransfer_argsStandardScheme getScheme() {
        return new MakeTransfer_argsStandardScheme();
      }
    }

    private static class MakeTransfer_argsStandardScheme extends StandardScheme<MakeTransfer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, MakeTransfer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RECEIVER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.receiver = new NodeID();
                struct.receiver.read(iprot);
                struct.setReceiverIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VALUE
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.value = iprot.readI64();
                struct.setValueIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, MakeTransfer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.receiver != null) {
          oprot.writeFieldBegin(RECEIVER_FIELD_DESC);
          struct.receiver.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(VALUE_FIELD_DESC);
        oprot.writeI64(struct.value);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MakeTransfer_argsTupleSchemeFactory implements SchemeFactory {
      public MakeTransfer_argsTupleScheme getScheme() {
        return new MakeTransfer_argsTupleScheme();
      }
    }

    private static class MakeTransfer_argsTupleScheme extends TupleScheme<MakeTransfer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MakeTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetReceiver()) {
          optionals.set(0);
        }
        if (struct.isSetValue()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetReceiver()) {
          struct.receiver.write(oprot);
        }
        if (struct.isSetValue()) {
          oprot.writeI64(struct.value);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MakeTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.receiver = new NodeID();
          struct.receiver.read(iprot);
          struct.setReceiverIsSet(true);
        }
        if (incoming.get(1)) {
          struct.value = iprot.readI64();
          struct.setValueIsSet(true);
        }
      }
    }

  }

  public static class MakeTransfer_result implements org.apache.thrift.TBase<MakeTransfer_result, MakeTransfer_result._Fields>, java.io.Serializable, Cloneable, Comparable<MakeTransfer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MakeTransfer_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new MakeTransfer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new MakeTransfer_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MakeTransfer_result.class, metaDataMap);
    }

    public MakeTransfer_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MakeTransfer_result(MakeTransfer_result other) {
    }

    public MakeTransfer_result deepCopy() {
      return new MakeTransfer_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof MakeTransfer_result)
        return this.equals((MakeTransfer_result)that);
      return false;
    }

    public boolean equals(MakeTransfer_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(MakeTransfer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("MakeTransfer_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class MakeTransfer_resultStandardSchemeFactory implements SchemeFactory {
      public MakeTransfer_resultStandardScheme getScheme() {
        return new MakeTransfer_resultStandardScheme();
      }
    }

    private static class MakeTransfer_resultStandardScheme extends StandardScheme<MakeTransfer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, MakeTransfer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, MakeTransfer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class MakeTransfer_resultTupleSchemeFactory implements SchemeFactory {
      public MakeTransfer_resultTupleScheme getScheme() {
        return new MakeTransfer_resultTupleScheme();
      }
    }

    private static class MakeTransfer_resultTupleScheme extends TupleScheme<MakeTransfer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, MakeTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, MakeTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetAccountBalance_args implements org.apache.thrift.TBase<GetAccountBalance_args, GetAccountBalance_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetAccountBalance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAccountBalance_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAccountBalance_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAccountBalance_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAccountBalance_args.class, metaDataMap);
    }

    public GetAccountBalance_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAccountBalance_args(GetAccountBalance_args other) {
    }

    public GetAccountBalance_args deepCopy() {
      return new GetAccountBalance_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAccountBalance_args)
        return this.equals((GetAccountBalance_args)that);
      return false;
    }

    public boolean equals(GetAccountBalance_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetAccountBalance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAccountBalance_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAccountBalance_argsStandardSchemeFactory implements SchemeFactory {
      public GetAccountBalance_argsStandardScheme getScheme() {
        return new GetAccountBalance_argsStandardScheme();
      }
    }

    private static class GetAccountBalance_argsStandardScheme extends StandardScheme<GetAccountBalance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAccountBalance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAccountBalance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAccountBalance_argsTupleSchemeFactory implements SchemeFactory {
      public GetAccountBalance_argsTupleScheme getScheme() {
        return new GetAccountBalance_argsTupleScheme();
      }
    }

    private static class GetAccountBalance_argsTupleScheme extends TupleScheme<GetAccountBalance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAccountBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAccountBalance_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetAccountBalance_result implements org.apache.thrift.TBase<GetAccountBalance_result, GetAccountBalance_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetAccountBalance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetAccountBalance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.I64, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetAccountBalance_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetAccountBalance_resultTupleSchemeFactory());
    }

    public long success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64          , "AccountBalanceType")));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetAccountBalance_result.class, metaDataMap);
    }

    public GetAccountBalance_result() {
    }

    public GetAccountBalance_result(
      long success)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetAccountBalance_result(GetAccountBalance_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
    }

    public GetAccountBalance_result deepCopy() {
      return new GetAccountBalance_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = 0;
    }

    public long getSuccess() {
      return this.success;
    }

    public GetAccountBalance_result setSuccess(long success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Long)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Long.valueOf(getSuccess());

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetAccountBalance_result)
        return this.equals((GetAccountBalance_result)that);
      return false;
    }

    public boolean equals(GetAccountBalance_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetAccountBalance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetAccountBalance_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetAccountBalance_resultStandardSchemeFactory implements SchemeFactory {
      public GetAccountBalance_resultStandardScheme getScheme() {
        return new GetAccountBalance_resultStandardScheme();
      }
    }

    private static class GetAccountBalance_resultStandardScheme extends StandardScheme<GetAccountBalance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetAccountBalance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.success = iprot.readI64();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetAccountBalance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeI64(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetAccountBalance_resultTupleSchemeFactory implements SchemeFactory {
      public GetAccountBalance_resultTupleScheme getScheme() {
        return new GetAccountBalance_resultTupleScheme();
      }
    }

    private static class GetAccountBalance_resultTupleScheme extends TupleScheme<GetAccountBalance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetAccountBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeI64(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetAccountBalance_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readI64();
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class Ping_args implements org.apache.thrift.TBase<Ping_args, Ping_args._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Ping_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Ping_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_args.class, metaDataMap);
    }

    public Ping_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Ping_args(Ping_args other) {
    }

    public Ping_args deepCopy() {
      return new Ping_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Ping_args)
        return this.equals((Ping_args)that);
      return false;
    }

    public boolean equals(Ping_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(Ping_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Ping_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Ping_argsStandardSchemeFactory implements SchemeFactory {
      public Ping_argsStandardScheme getScheme() {
        return new Ping_argsStandardScheme();
      }
    }

    private static class Ping_argsStandardScheme extends StandardScheme<Ping_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Ping_argsTupleSchemeFactory implements SchemeFactory {
      public Ping_argsTupleScheme getScheme() {
        return new Ping_argsTupleScheme();
      }
    }

    private static class Ping_argsTupleScheme extends TupleScheme<Ping_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Ping_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class Ping_result implements org.apache.thrift.TBase<Ping_result, Ping_result._Fields>, java.io.Serializable, Cloneable, Comparable<Ping_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ping_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new Ping_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new Ping_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ping_result.class, metaDataMap);
    }

    public Ping_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Ping_result(Ping_result other) {
    }

    public Ping_result deepCopy() {
      return new Ping_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof Ping_result)
        return this.equals((Ping_result)that);
      return false;
    }

    public boolean equals(Ping_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(Ping_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("Ping_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class Ping_resultStandardSchemeFactory implements SchemeFactory {
      public Ping_resultStandardScheme getScheme() {
        return new Ping_resultStandardScheme();
      }
    }

    private static class Ping_resultStandardScheme extends StandardScheme<Ping_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, Ping_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, Ping_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class Ping_resultTupleSchemeFactory implements SchemeFactory {
      public Ping_resultTupleScheme getScheme() {
        return new Ping_resultTupleScheme();
      }
    }

    private static class Ping_resultTupleScheme extends TupleScheme<Ping_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, Ping_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class PingSwarm_args implements org.apache.thrift.TBase<PingSwarm_args, PingSwarm_args._Fields>, java.io.Serializable, Cloneable, Comparable<PingSwarm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PingSwarm_args");

    private static final org.apache.thrift.protocol.TField LEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("leader", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("transfer", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PingSwarm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new PingSwarm_argsTupleSchemeFactory());
    }

    public NodeID leader; // required
    public TransferID transfer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      LEADER((short)1, "leader"),
      TRANSFER((short)2, "transfer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // LEADER
            return LEADER;
          case 2: // TRANSFER
            return TRANSFER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.LEADER, new org.apache.thrift.meta_data.FieldMetaData("leader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeID.class)));
      tmpMap.put(_Fields.TRANSFER, new org.apache.thrift.meta_data.FieldMetaData("transfer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PingSwarm_args.class, metaDataMap);
    }

    public PingSwarm_args() {
    }

    public PingSwarm_args(
      NodeID leader,
      TransferID transfer)
    {
      this();
      this.leader = leader;
      this.transfer = transfer;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PingSwarm_args(PingSwarm_args other) {
      if (other.isSetLeader()) {
        this.leader = new NodeID(other.leader);
      }
      if (other.isSetTransfer()) {
        this.transfer = new TransferID(other.transfer);
      }
    }

    public PingSwarm_args deepCopy() {
      return new PingSwarm_args(this);
    }

    @Override
    public void clear() {
      this.leader = null;
      this.transfer = null;
    }

    public NodeID getLeader() {
      return this.leader;
    }

    public PingSwarm_args setLeader(NodeID leader) {
      this.leader = leader;
      return this;
    }

    public void unsetLeader() {
      this.leader = null;
    }

    /** Returns true if field leader is set (has been assigned a value) and false otherwise */
    public boolean isSetLeader() {
      return this.leader != null;
    }

    public void setLeaderIsSet(boolean value) {
      if (!value) {
        this.leader = null;
      }
    }

    public TransferID getTransfer() {
      return this.transfer;
    }

    public PingSwarm_args setTransfer(TransferID transfer) {
      this.transfer = transfer;
      return this;
    }

    public void unsetTransfer() {
      this.transfer = null;
    }

    /** Returns true if field transfer is set (has been assigned a value) and false otherwise */
    public boolean isSetTransfer() {
      return this.transfer != null;
    }

    public void setTransferIsSet(boolean value) {
      if (!value) {
        this.transfer = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case LEADER:
        if (value == null) {
          unsetLeader();
        } else {
          setLeader((NodeID)value);
        }
        break;

      case TRANSFER:
        if (value == null) {
          unsetTransfer();
        } else {
          setTransfer((TransferID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case LEADER:
        return getLeader();

      case TRANSFER:
        return getTransfer();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case LEADER:
        return isSetLeader();
      case TRANSFER:
        return isSetTransfer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PingSwarm_args)
        return this.equals((PingSwarm_args)that);
      return false;
    }

    public boolean equals(PingSwarm_args that) {
      if (that == null)
        return false;

      boolean this_present_leader = true && this.isSetLeader();
      boolean that_present_leader = true && that.isSetLeader();
      if (this_present_leader || that_present_leader) {
        if (!(this_present_leader && that_present_leader))
          return false;
        if (!this.leader.equals(that.leader))
          return false;
      }

      boolean this_present_transfer = true && this.isSetTransfer();
      boolean that_present_transfer = true && that.isSetTransfer();
      if (this_present_transfer || that_present_transfer) {
        if (!(this_present_transfer && that_present_transfer))
          return false;
        if (!this.transfer.equals(that.transfer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(PingSwarm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetLeader()).compareTo(other.isSetLeader());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetLeader()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leader, other.leader);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransfer()).compareTo(other.isSetTransfer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransfer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transfer, other.transfer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PingSwarm_args(");
      boolean first = true;

      sb.append("leader:");
      if (this.leader == null) {
        sb.append("null");
      } else {
        sb.append(this.leader);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("transfer:");
      if (this.transfer == null) {
        sb.append("null");
      } else {
        sb.append(this.transfer);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (leader != null) {
        leader.validate();
      }
      if (transfer != null) {
        transfer.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PingSwarm_argsStandardSchemeFactory implements SchemeFactory {
      public PingSwarm_argsStandardScheme getScheme() {
        return new PingSwarm_argsStandardScheme();
      }
    }

    private static class PingSwarm_argsStandardScheme extends StandardScheme<PingSwarm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PingSwarm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // LEADER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.leader = new NodeID();
                struct.leader.read(iprot);
                struct.setLeaderIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transfer = new TransferID();
                struct.transfer.read(iprot);
                struct.setTransferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PingSwarm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.leader != null) {
          oprot.writeFieldBegin(LEADER_FIELD_DESC);
          struct.leader.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.transfer != null) {
          oprot.writeFieldBegin(TRANSFER_FIELD_DESC);
          struct.transfer.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PingSwarm_argsTupleSchemeFactory implements SchemeFactory {
      public PingSwarm_argsTupleScheme getScheme() {
        return new PingSwarm_argsTupleScheme();
      }
    }

    private static class PingSwarm_argsTupleScheme extends TupleScheme<PingSwarm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PingSwarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetLeader()) {
          optionals.set(0);
        }
        if (struct.isSetTransfer()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetLeader()) {
          struct.leader.write(oprot);
        }
        if (struct.isSetTransfer()) {
          struct.transfer.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PingSwarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.leader = new NodeID();
          struct.leader.read(iprot);
          struct.setLeaderIsSet(true);
        }
        if (incoming.get(1)) {
          struct.transfer = new TransferID();
          struct.transfer.read(iprot);
          struct.setTransferIsSet(true);
        }
      }
    }

  }

  public static class PingSwarm_result implements org.apache.thrift.TBase<PingSwarm_result, PingSwarm_result._Fields>, java.io.Serializable, Cloneable, Comparable<PingSwarm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PingSwarm_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new PingSwarm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new PingSwarm_resultTupleSchemeFactory());
    }

    public NotSwarmMemeber exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PingSwarm_result.class, metaDataMap);
    }

    public PingSwarm_result() {
    }

    public PingSwarm_result(
      NotSwarmMemeber exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public PingSwarm_result(PingSwarm_result other) {
      if (other.isSetExc()) {
        this.exc = new NotSwarmMemeber(other.exc);
      }
    }

    public PingSwarm_result deepCopy() {
      return new PingSwarm_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public NotSwarmMemeber getExc() {
      return this.exc;
    }

    public PingSwarm_result setExc(NotSwarmMemeber exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotSwarmMemeber)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof PingSwarm_result)
        return this.equals((PingSwarm_result)that);
      return false;
    }

    public boolean equals(PingSwarm_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(PingSwarm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("PingSwarm_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class PingSwarm_resultStandardSchemeFactory implements SchemeFactory {
      public PingSwarm_resultStandardScheme getScheme() {
        return new PingSwarm_resultStandardScheme();
      }
    }

    private static class PingSwarm_resultStandardScheme extends StandardScheme<PingSwarm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, PingSwarm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotSwarmMemeber();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, PingSwarm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class PingSwarm_resultTupleSchemeFactory implements SchemeFactory {
      public PingSwarm_resultTupleScheme getScheme() {
        return new PingSwarm_resultTupleScheme();
      }
    }

    private static class PingSwarm_resultTupleScheme extends TupleScheme<PingSwarm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, PingSwarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, PingSwarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new NotSwarmMemeber();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class UpdateSwarmMembers_args implements org.apache.thrift.TBase<UpdateSwarmMembers_args, UpdateSwarmMembers_args._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateSwarmMembers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateSwarmMembers_args");

    private static final org.apache.thrift.protocol.TField SWARM_FIELD_DESC = new org.apache.thrift.protocol.TField("swarm", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateSwarmMembers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateSwarmMembers_argsTupleSchemeFactory());
    }

    public Swarm swarm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SWARM((short)1, "swarm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SWARM
            return SWARM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SWARM, new org.apache.thrift.meta_data.FieldMetaData("swarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Swarm.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateSwarmMembers_args.class, metaDataMap);
    }

    public UpdateSwarmMembers_args() {
    }

    public UpdateSwarmMembers_args(
      Swarm swarm)
    {
      this();
      this.swarm = swarm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateSwarmMembers_args(UpdateSwarmMembers_args other) {
      if (other.isSetSwarm()) {
        this.swarm = new Swarm(other.swarm);
      }
    }

    public UpdateSwarmMembers_args deepCopy() {
      return new UpdateSwarmMembers_args(this);
    }

    @Override
    public void clear() {
      this.swarm = null;
    }

    public Swarm getSwarm() {
      return this.swarm;
    }

    public UpdateSwarmMembers_args setSwarm(Swarm swarm) {
      this.swarm = swarm;
      return this;
    }

    public void unsetSwarm() {
      this.swarm = null;
    }

    /** Returns true if field swarm is set (has been assigned a value) and false otherwise */
    public boolean isSetSwarm() {
      return this.swarm != null;
    }

    public void setSwarmIsSet(boolean value) {
      if (!value) {
        this.swarm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SWARM:
        if (value == null) {
          unsetSwarm();
        } else {
          setSwarm((Swarm)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SWARM:
        return getSwarm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SWARM:
        return isSetSwarm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateSwarmMembers_args)
        return this.equals((UpdateSwarmMembers_args)that);
      return false;
    }

    public boolean equals(UpdateSwarmMembers_args that) {
      if (that == null)
        return false;

      boolean this_present_swarm = true && this.isSetSwarm();
      boolean that_present_swarm = true && that.isSetSwarm();
      if (this_present_swarm || that_present_swarm) {
        if (!(this_present_swarm && that_present_swarm))
          return false;
        if (!this.swarm.equals(that.swarm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(UpdateSwarmMembers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSwarm()).compareTo(other.isSetSwarm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSwarm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swarm, other.swarm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateSwarmMembers_args(");
      boolean first = true;

      sb.append("swarm:");
      if (this.swarm == null) {
        sb.append("null");
      } else {
        sb.append(this.swarm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (swarm != null) {
        swarm.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateSwarmMembers_argsStandardSchemeFactory implements SchemeFactory {
      public UpdateSwarmMembers_argsStandardScheme getScheme() {
        return new UpdateSwarmMembers_argsStandardScheme();
      }
    }

    private static class UpdateSwarmMembers_argsStandardScheme extends StandardScheme<UpdateSwarmMembers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateSwarmMembers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SWARM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.swarm = new Swarm();
                struct.swarm.read(iprot);
                struct.setSwarmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateSwarmMembers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.swarm != null) {
          oprot.writeFieldBegin(SWARM_FIELD_DESC);
          struct.swarm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateSwarmMembers_argsTupleSchemeFactory implements SchemeFactory {
      public UpdateSwarmMembers_argsTupleScheme getScheme() {
        return new UpdateSwarmMembers_argsTupleScheme();
      }
    }

    private static class UpdateSwarmMembers_argsTupleScheme extends TupleScheme<UpdateSwarmMembers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateSwarmMembers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSwarm()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSwarm()) {
          struct.swarm.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateSwarmMembers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.swarm = new Swarm();
          struct.swarm.read(iprot);
          struct.setSwarmIsSet(true);
        }
      }
    }

  }

  public static class UpdateSwarmMembers_result implements org.apache.thrift.TBase<UpdateSwarmMembers_result, UpdateSwarmMembers_result._Fields>, java.io.Serializable, Cloneable, Comparable<UpdateSwarmMembers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("UpdateSwarmMembers_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXC2_FIELD_DESC = new org.apache.thrift.protocol.TField("exc2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new UpdateSwarmMembers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new UpdateSwarmMembers_resultTupleSchemeFactory());
    }

    public NotSwarmMemeber exc; // required
    public WrongSwarmLeader exc2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc"),
      EXC2((short)2, "exc2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          case 2: // EXC2
            return EXC2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXC2, new org.apache.thrift.meta_data.FieldMetaData("exc2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(UpdateSwarmMembers_result.class, metaDataMap);
    }

    public UpdateSwarmMembers_result() {
    }

    public UpdateSwarmMembers_result(
      NotSwarmMemeber exc,
      WrongSwarmLeader exc2)
    {
      this();
      this.exc = exc;
      this.exc2 = exc2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public UpdateSwarmMembers_result(UpdateSwarmMembers_result other) {
      if (other.isSetExc()) {
        this.exc = new NotSwarmMemeber(other.exc);
      }
      if (other.isSetExc2()) {
        this.exc2 = new WrongSwarmLeader(other.exc2);
      }
    }

    public UpdateSwarmMembers_result deepCopy() {
      return new UpdateSwarmMembers_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
      this.exc2 = null;
    }

    public NotSwarmMemeber getExc() {
      return this.exc;
    }

    public UpdateSwarmMembers_result setExc(NotSwarmMemeber exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public WrongSwarmLeader getExc2() {
      return this.exc2;
    }

    public UpdateSwarmMembers_result setExc2(WrongSwarmLeader exc2) {
      this.exc2 = exc2;
      return this;
    }

    public void unsetExc2() {
      this.exc2 = null;
    }

    /** Returns true if field exc2 is set (has been assigned a value) and false otherwise */
    public boolean isSetExc2() {
      return this.exc2 != null;
    }

    public void setExc2IsSet(boolean value) {
      if (!value) {
        this.exc2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotSwarmMemeber)value);
        }
        break;

      case EXC2:
        if (value == null) {
          unsetExc2();
        } else {
          setExc2((WrongSwarmLeader)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      case EXC2:
        return getExc2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      case EXC2:
        return isSetExc2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof UpdateSwarmMembers_result)
        return this.equals((UpdateSwarmMembers_result)that);
      return false;
    }

    public boolean equals(UpdateSwarmMembers_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_exc2 = true && this.isSetExc2();
      boolean that_present_exc2 = true && that.isSetExc2();
      if (this_present_exc2 || that_present_exc2) {
        if (!(this_present_exc2 && that_present_exc2))
          return false;
        if (!this.exc2.equals(that.exc2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(UpdateSwarmMembers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc2()).compareTo(other.isSetExc2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc2, other.exc2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("UpdateSwarmMembers_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc2:");
      if (this.exc2 == null) {
        sb.append("null");
      } else {
        sb.append(this.exc2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class UpdateSwarmMembers_resultStandardSchemeFactory implements SchemeFactory {
      public UpdateSwarmMembers_resultStandardScheme getScheme() {
        return new UpdateSwarmMembers_resultStandardScheme();
      }
    }

    private static class UpdateSwarmMembers_resultStandardScheme extends StandardScheme<UpdateSwarmMembers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, UpdateSwarmMembers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotSwarmMemeber();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXC2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc2 = new WrongSwarmLeader();
                struct.exc2.read(iprot);
                struct.setExc2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, UpdateSwarmMembers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc2 != null) {
          oprot.writeFieldBegin(EXC2_FIELD_DESC);
          struct.exc2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class UpdateSwarmMembers_resultTupleSchemeFactory implements SchemeFactory {
      public UpdateSwarmMembers_resultTupleScheme getScheme() {
        return new UpdateSwarmMembers_resultTupleScheme();
      }
    }

    private static class UpdateSwarmMembers_resultTupleScheme extends TupleScheme<UpdateSwarmMembers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, UpdateSwarmMembers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        if (struct.isSetExc2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExc2()) {
          struct.exc2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, UpdateSwarmMembers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.exc = new NotSwarmMemeber();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc2 = new WrongSwarmLeader();
          struct.exc2.read(iprot);
          struct.setExc2IsSet(true);
        }
      }
    }

  }

  public static class AddToSwarm_args implements org.apache.thrift.TBase<AddToSwarm_args, AddToSwarm_args._Fields>, java.io.Serializable, Cloneable, Comparable<AddToSwarm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddToSwarm_args");

    private static final org.apache.thrift.protocol.TField SWARM_FIELD_DESC = new org.apache.thrift.protocol.TField("swarm", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddToSwarm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddToSwarm_argsTupleSchemeFactory());
    }

    public Swarm swarm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SWARM((short)1, "swarm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SWARM
            return SWARM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SWARM, new org.apache.thrift.meta_data.FieldMetaData("swarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Swarm.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddToSwarm_args.class, metaDataMap);
    }

    public AddToSwarm_args() {
    }

    public AddToSwarm_args(
      Swarm swarm)
    {
      this();
      this.swarm = swarm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddToSwarm_args(AddToSwarm_args other) {
      if (other.isSetSwarm()) {
        this.swarm = new Swarm(other.swarm);
      }
    }

    public AddToSwarm_args deepCopy() {
      return new AddToSwarm_args(this);
    }

    @Override
    public void clear() {
      this.swarm = null;
    }

    public Swarm getSwarm() {
      return this.swarm;
    }

    public AddToSwarm_args setSwarm(Swarm swarm) {
      this.swarm = swarm;
      return this;
    }

    public void unsetSwarm() {
      this.swarm = null;
    }

    /** Returns true if field swarm is set (has been assigned a value) and false otherwise */
    public boolean isSetSwarm() {
      return this.swarm != null;
    }

    public void setSwarmIsSet(boolean value) {
      if (!value) {
        this.swarm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SWARM:
        if (value == null) {
          unsetSwarm();
        } else {
          setSwarm((Swarm)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SWARM:
        return getSwarm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SWARM:
        return isSetSwarm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddToSwarm_args)
        return this.equals((AddToSwarm_args)that);
      return false;
    }

    public boolean equals(AddToSwarm_args that) {
      if (that == null)
        return false;

      boolean this_present_swarm = true && this.isSetSwarm();
      boolean that_present_swarm = true && that.isSetSwarm();
      if (this_present_swarm || that_present_swarm) {
        if (!(this_present_swarm && that_present_swarm))
          return false;
        if (!this.swarm.equals(that.swarm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(AddToSwarm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSwarm()).compareTo(other.isSetSwarm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSwarm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swarm, other.swarm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddToSwarm_args(");
      boolean first = true;

      sb.append("swarm:");
      if (this.swarm == null) {
        sb.append("null");
      } else {
        sb.append(this.swarm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (swarm != null) {
        swarm.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddToSwarm_argsStandardSchemeFactory implements SchemeFactory {
      public AddToSwarm_argsStandardScheme getScheme() {
        return new AddToSwarm_argsStandardScheme();
      }
    }

    private static class AddToSwarm_argsStandardScheme extends StandardScheme<AddToSwarm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddToSwarm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SWARM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.swarm = new Swarm();
                struct.swarm.read(iprot);
                struct.setSwarmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddToSwarm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.swarm != null) {
          oprot.writeFieldBegin(SWARM_FIELD_DESC);
          struct.swarm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddToSwarm_argsTupleSchemeFactory implements SchemeFactory {
      public AddToSwarm_argsTupleScheme getScheme() {
        return new AddToSwarm_argsTupleScheme();
      }
    }

    private static class AddToSwarm_argsTupleScheme extends TupleScheme<AddToSwarm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddToSwarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSwarm()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSwarm()) {
          struct.swarm.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddToSwarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.swarm = new Swarm();
          struct.swarm.read(iprot);
          struct.setSwarmIsSet(true);
        }
      }
    }

  }

  public static class AddToSwarm_result implements org.apache.thrift.TBase<AddToSwarm_result, AddToSwarm_result._Fields>, java.io.Serializable, Cloneable, Comparable<AddToSwarm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AddToSwarm_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new AddToSwarm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new AddToSwarm_resultTupleSchemeFactory());
    }

    public AlreadySwarmMemeber exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AddToSwarm_result.class, metaDataMap);
    }

    public AddToSwarm_result() {
    }

    public AddToSwarm_result(
      AlreadySwarmMemeber exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public AddToSwarm_result(AddToSwarm_result other) {
      if (other.isSetExc()) {
        this.exc = new AlreadySwarmMemeber(other.exc);
      }
    }

    public AddToSwarm_result deepCopy() {
      return new AddToSwarm_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public AlreadySwarmMemeber getExc() {
      return this.exc;
    }

    public AddToSwarm_result setExc(AlreadySwarmMemeber exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((AlreadySwarmMemeber)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof AddToSwarm_result)
        return this.equals((AddToSwarm_result)that);
      return false;
    }

    public boolean equals(AddToSwarm_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(AddToSwarm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("AddToSwarm_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class AddToSwarm_resultStandardSchemeFactory implements SchemeFactory {
      public AddToSwarm_resultStandardScheme getScheme() {
        return new AddToSwarm_resultStandardScheme();
      }
    }

    private static class AddToSwarm_resultStandardScheme extends StandardScheme<AddToSwarm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, AddToSwarm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new AlreadySwarmMemeber();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, AddToSwarm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class AddToSwarm_resultTupleSchemeFactory implements SchemeFactory {
      public AddToSwarm_resultTupleScheme getScheme() {
        return new AddToSwarm_resultTupleScheme();
      }
    }

    private static class AddToSwarm_resultTupleScheme extends TupleScheme<AddToSwarm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, AddToSwarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, AddToSwarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new AlreadySwarmMemeber();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class DelSwarm_args implements org.apache.thrift.TBase<DelSwarm_args, DelSwarm_args._Fields>, java.io.Serializable, Cloneable, Comparable<DelSwarm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelSwarm_args");

    private static final org.apache.thrift.protocol.TField SWARM_FIELD_DESC = new org.apache.thrift.protocol.TField("swarm", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelSwarm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelSwarm_argsTupleSchemeFactory());
    }

    public Swarm swarm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SWARM((short)1, "swarm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SWARM
            return SWARM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SWARM, new org.apache.thrift.meta_data.FieldMetaData("swarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Swarm.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelSwarm_args.class, metaDataMap);
    }

    public DelSwarm_args() {
    }

    public DelSwarm_args(
      Swarm swarm)
    {
      this();
      this.swarm = swarm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelSwarm_args(DelSwarm_args other) {
      if (other.isSetSwarm()) {
        this.swarm = new Swarm(other.swarm);
      }
    }

    public DelSwarm_args deepCopy() {
      return new DelSwarm_args(this);
    }

    @Override
    public void clear() {
      this.swarm = null;
    }

    public Swarm getSwarm() {
      return this.swarm;
    }

    public DelSwarm_args setSwarm(Swarm swarm) {
      this.swarm = swarm;
      return this;
    }

    public void unsetSwarm() {
      this.swarm = null;
    }

    /** Returns true if field swarm is set (has been assigned a value) and false otherwise */
    public boolean isSetSwarm() {
      return this.swarm != null;
    }

    public void setSwarmIsSet(boolean value) {
      if (!value) {
        this.swarm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SWARM:
        if (value == null) {
          unsetSwarm();
        } else {
          setSwarm((Swarm)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SWARM:
        return getSwarm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SWARM:
        return isSetSwarm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelSwarm_args)
        return this.equals((DelSwarm_args)that);
      return false;
    }

    public boolean equals(DelSwarm_args that) {
      if (that == null)
        return false;

      boolean this_present_swarm = true && this.isSetSwarm();
      boolean that_present_swarm = true && that.isSetSwarm();
      if (this_present_swarm || that_present_swarm) {
        if (!(this_present_swarm && that_present_swarm))
          return false;
        if (!this.swarm.equals(that.swarm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(DelSwarm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSwarm()).compareTo(other.isSetSwarm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSwarm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swarm, other.swarm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelSwarm_args(");
      boolean first = true;

      sb.append("swarm:");
      if (this.swarm == null) {
        sb.append("null");
      } else {
        sb.append(this.swarm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (swarm != null) {
        swarm.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelSwarm_argsStandardSchemeFactory implements SchemeFactory {
      public DelSwarm_argsStandardScheme getScheme() {
        return new DelSwarm_argsStandardScheme();
      }
    }

    private static class DelSwarm_argsStandardScheme extends StandardScheme<DelSwarm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelSwarm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SWARM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.swarm = new Swarm();
                struct.swarm.read(iprot);
                struct.setSwarmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelSwarm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.swarm != null) {
          oprot.writeFieldBegin(SWARM_FIELD_DESC);
          struct.swarm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelSwarm_argsTupleSchemeFactory implements SchemeFactory {
      public DelSwarm_argsTupleScheme getScheme() {
        return new DelSwarm_argsTupleScheme();
      }
    }

    private static class DelSwarm_argsTupleScheme extends TupleScheme<DelSwarm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelSwarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSwarm()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSwarm()) {
          struct.swarm.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelSwarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.swarm = new Swarm();
          struct.swarm.read(iprot);
          struct.setSwarmIsSet(true);
        }
      }
    }

  }

  public static class DelSwarm_result implements org.apache.thrift.TBase<DelSwarm_result, DelSwarm_result._Fields>, java.io.Serializable, Cloneable, Comparable<DelSwarm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DelSwarm_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField EXC2_FIELD_DESC = new org.apache.thrift.protocol.TField("exc2", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DelSwarm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DelSwarm_resultTupleSchemeFactory());
    }

    public NotSwarmMemeber exc; // required
    public WrongSwarmLeader exc2; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc"),
      EXC2((short)2, "exc2");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          case 2: // EXC2
            return EXC2;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      tmpMap.put(_Fields.EXC2, new org.apache.thrift.meta_data.FieldMetaData("exc2", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DelSwarm_result.class, metaDataMap);
    }

    public DelSwarm_result() {
    }

    public DelSwarm_result(
      NotSwarmMemeber exc,
      WrongSwarmLeader exc2)
    {
      this();
      this.exc = exc;
      this.exc2 = exc2;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DelSwarm_result(DelSwarm_result other) {
      if (other.isSetExc()) {
        this.exc = new NotSwarmMemeber(other.exc);
      }
      if (other.isSetExc2()) {
        this.exc2 = new WrongSwarmLeader(other.exc2);
      }
    }

    public DelSwarm_result deepCopy() {
      return new DelSwarm_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
      this.exc2 = null;
    }

    public NotSwarmMemeber getExc() {
      return this.exc;
    }

    public DelSwarm_result setExc(NotSwarmMemeber exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public WrongSwarmLeader getExc2() {
      return this.exc2;
    }

    public DelSwarm_result setExc2(WrongSwarmLeader exc2) {
      this.exc2 = exc2;
      return this;
    }

    public void unsetExc2() {
      this.exc2 = null;
    }

    /** Returns true if field exc2 is set (has been assigned a value) and false otherwise */
    public boolean isSetExc2() {
      return this.exc2 != null;
    }

    public void setExc2IsSet(boolean value) {
      if (!value) {
        this.exc2 = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotSwarmMemeber)value);
        }
        break;

      case EXC2:
        if (value == null) {
          unsetExc2();
        } else {
          setExc2((WrongSwarmLeader)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      case EXC2:
        return getExc2();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      case EXC2:
        return isSetExc2();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DelSwarm_result)
        return this.equals((DelSwarm_result)that);
      return false;
    }

    public boolean equals(DelSwarm_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      boolean this_present_exc2 = true && this.isSetExc2();
      boolean that_present_exc2 = true && that.isSetExc2();
      if (this_present_exc2 || that_present_exc2) {
        if (!(this_present_exc2 && that_present_exc2))
          return false;
        if (!this.exc2.equals(that.exc2))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(DelSwarm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc2()).compareTo(other.isSetExc2());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc2()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc2, other.exc2);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DelSwarm_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc2:");
      if (this.exc2 == null) {
        sb.append("null");
      } else {
        sb.append(this.exc2);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DelSwarm_resultStandardSchemeFactory implements SchemeFactory {
      public DelSwarm_resultStandardScheme getScheme() {
        return new DelSwarm_resultStandardScheme();
      }
    }

    private static class DelSwarm_resultStandardScheme extends StandardScheme<DelSwarm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DelSwarm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotSwarmMemeber();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // EXC2
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc2 = new WrongSwarmLeader();
                struct.exc2.read(iprot);
                struct.setExc2IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DelSwarm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc2 != null) {
          oprot.writeFieldBegin(EXC2_FIELD_DESC);
          struct.exc2.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DelSwarm_resultTupleSchemeFactory implements SchemeFactory {
      public DelSwarm_resultTupleScheme getScheme() {
        return new DelSwarm_resultTupleScheme();
      }
    }

    private static class DelSwarm_resultTupleScheme extends TupleScheme<DelSwarm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DelSwarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        if (struct.isSetExc2()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
        if (struct.isSetExc2()) {
          struct.exc2.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DelSwarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.exc = new NotSwarmMemeber();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc2 = new WrongSwarmLeader();
          struct.exc2.read(iprot);
          struct.setExc2IsSet(true);
        }
      }
    }

  }

  public static class GetSwarm_args implements org.apache.thrift.TBase<GetSwarm_args, GetSwarm_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetSwarm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSwarm_args");

    private static final org.apache.thrift.protocol.TField TRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("transfer", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSwarm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSwarm_argsTupleSchemeFactory());
    }

    public TransferID transfer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSFER((short)1, "transfer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSFER
            return TRANSFER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSFER, new org.apache.thrift.meta_data.FieldMetaData("transfer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSwarm_args.class, metaDataMap);
    }

    public GetSwarm_args() {
    }

    public GetSwarm_args(
      TransferID transfer)
    {
      this();
      this.transfer = transfer;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSwarm_args(GetSwarm_args other) {
      if (other.isSetTransfer()) {
        this.transfer = new TransferID(other.transfer);
      }
    }

    public GetSwarm_args deepCopy() {
      return new GetSwarm_args(this);
    }

    @Override
    public void clear() {
      this.transfer = null;
    }

    public TransferID getTransfer() {
      return this.transfer;
    }

    public GetSwarm_args setTransfer(TransferID transfer) {
      this.transfer = transfer;
      return this;
    }

    public void unsetTransfer() {
      this.transfer = null;
    }

    /** Returns true if field transfer is set (has been assigned a value) and false otherwise */
    public boolean isSetTransfer() {
      return this.transfer != null;
    }

    public void setTransferIsSet(boolean value) {
      if (!value) {
        this.transfer = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSFER:
        if (value == null) {
          unsetTransfer();
        } else {
          setTransfer((TransferID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSFER:
        return getTransfer();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSFER:
        return isSetTransfer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSwarm_args)
        return this.equals((GetSwarm_args)that);
      return false;
    }

    public boolean equals(GetSwarm_args that) {
      if (that == null)
        return false;

      boolean this_present_transfer = true && this.isSetTransfer();
      boolean that_present_transfer = true && that.isSetTransfer();
      if (this_present_transfer || that_present_transfer) {
        if (!(this_present_transfer && that_present_transfer))
          return false;
        if (!this.transfer.equals(that.transfer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSwarm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransfer()).compareTo(other.isSetTransfer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransfer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transfer, other.transfer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSwarm_args(");
      boolean first = true;

      sb.append("transfer:");
      if (this.transfer == null) {
        sb.append("null");
      } else {
        sb.append(this.transfer);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transfer != null) {
        transfer.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSwarm_argsStandardSchemeFactory implements SchemeFactory {
      public GetSwarm_argsStandardScheme getScheme() {
        return new GetSwarm_argsStandardScheme();
      }
    }

    private static class GetSwarm_argsStandardScheme extends StandardScheme<GetSwarm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSwarm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transfer = new TransferID();
                struct.transfer.read(iprot);
                struct.setTransferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSwarm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transfer != null) {
          oprot.writeFieldBegin(TRANSFER_FIELD_DESC);
          struct.transfer.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSwarm_argsTupleSchemeFactory implements SchemeFactory {
      public GetSwarm_argsTupleScheme getScheme() {
        return new GetSwarm_argsTupleScheme();
      }
    }

    private static class GetSwarm_argsTupleScheme extends TupleScheme<GetSwarm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSwarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransfer()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransfer()) {
          struct.transfer.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSwarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.transfer = new TransferID();
          struct.transfer.read(iprot);
          struct.setTransferIsSet(true);
        }
      }
    }

  }

  public static class GetSwarm_result implements org.apache.thrift.TBase<GetSwarm_result, GetSwarm_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetSwarm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSwarm_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRUCT, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSwarm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSwarm_resultTupleSchemeFactory());
    }

    public Swarm success; // required
    public NotSwarmMemeber exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Swarm.class)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSwarm_result.class, metaDataMap);
    }

    public GetSwarm_result() {
    }

    public GetSwarm_result(
      Swarm success,
      NotSwarmMemeber exc)
    {
      this();
      this.success = success;
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSwarm_result(GetSwarm_result other) {
      if (other.isSetSuccess()) {
        this.success = new Swarm(other.success);
      }
      if (other.isSetExc()) {
        this.exc = new NotSwarmMemeber(other.exc);
      }
    }

    public GetSwarm_result deepCopy() {
      return new GetSwarm_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
      this.exc = null;
    }

    public Swarm getSuccess() {
      return this.success;
    }

    public GetSwarm_result setSuccess(Swarm success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public NotSwarmMemeber getExc() {
      return this.exc;
    }

    public GetSwarm_result setExc(NotSwarmMemeber exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Swarm)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotSwarmMemeber)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSwarm_result)
        return this.equals((GetSwarm_result)that);
      return false;
    }

    public boolean equals(GetSwarm_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSwarm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSwarm_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (success != null) {
        success.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSwarm_resultStandardSchemeFactory implements SchemeFactory {
      public GetSwarm_resultStandardScheme getScheme() {
        return new GetSwarm_resultStandardScheme();
      }
    }

    private static class GetSwarm_resultStandardScheme extends StandardScheme<GetSwarm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSwarm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.success = new Swarm();
                struct.success.read(iprot);
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotSwarmMemeber();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSwarm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          struct.success.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSwarm_resultTupleSchemeFactory implements SchemeFactory {
      public GetSwarm_resultTupleScheme getScheme() {
        return new GetSwarm_resultTupleScheme();
      }
    }

    private static class GetSwarm_resultTupleScheme extends TupleScheme<GetSwarm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSwarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          struct.success.write(oprot);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSwarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = new Swarm();
          struct.success.read(iprot);
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotSwarmMemeber();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class ElectSwarmLeader_args implements org.apache.thrift.TBase<ElectSwarmLeader_args, ElectSwarmLeader_args._Fields>, java.io.Serializable, Cloneable, Comparable<ElectSwarmLeader_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ElectSwarmLeader_args");

    private static final org.apache.thrift.protocol.TField CADIDATE_FIELD_DESC = new org.apache.thrift.protocol.TField("cadidate", org.apache.thrift.protocol.TType.STRUCT, (short)1);
    private static final org.apache.thrift.protocol.TField TRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("Transfer", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ElectSwarmLeader_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ElectSwarmLeader_argsTupleSchemeFactory());
    }

    public NodeID cadidate; // required
    public TransferID Transfer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CADIDATE((short)1, "cadidate"),
      TRANSFER((short)2, "Transfer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CADIDATE
            return CADIDATE;
          case 2: // TRANSFER
            return TRANSFER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CADIDATE, new org.apache.thrift.meta_data.FieldMetaData("cadidate", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeID.class)));
      tmpMap.put(_Fields.TRANSFER, new org.apache.thrift.meta_data.FieldMetaData("Transfer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ElectSwarmLeader_args.class, metaDataMap);
    }

    public ElectSwarmLeader_args() {
    }

    public ElectSwarmLeader_args(
      NodeID cadidate,
      TransferID Transfer)
    {
      this();
      this.cadidate = cadidate;
      this.Transfer = Transfer;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ElectSwarmLeader_args(ElectSwarmLeader_args other) {
      if (other.isSetCadidate()) {
        this.cadidate = new NodeID(other.cadidate);
      }
      if (other.isSetTransfer()) {
        this.Transfer = new TransferID(other.Transfer);
      }
    }

    public ElectSwarmLeader_args deepCopy() {
      return new ElectSwarmLeader_args(this);
    }

    @Override
    public void clear() {
      this.cadidate = null;
      this.Transfer = null;
    }

    public NodeID getCadidate() {
      return this.cadidate;
    }

    public ElectSwarmLeader_args setCadidate(NodeID cadidate) {
      this.cadidate = cadidate;
      return this;
    }

    public void unsetCadidate() {
      this.cadidate = null;
    }

    /** Returns true if field cadidate is set (has been assigned a value) and false otherwise */
    public boolean isSetCadidate() {
      return this.cadidate != null;
    }

    public void setCadidateIsSet(boolean value) {
      if (!value) {
        this.cadidate = null;
      }
    }

    public TransferID getTransfer() {
      return this.Transfer;
    }

    public ElectSwarmLeader_args setTransfer(TransferID Transfer) {
      this.Transfer = Transfer;
      return this;
    }

    public void unsetTransfer() {
      this.Transfer = null;
    }

    /** Returns true if field Transfer is set (has been assigned a value) and false otherwise */
    public boolean isSetTransfer() {
      return this.Transfer != null;
    }

    public void setTransferIsSet(boolean value) {
      if (!value) {
        this.Transfer = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case CADIDATE:
        if (value == null) {
          unsetCadidate();
        } else {
          setCadidate((NodeID)value);
        }
        break;

      case TRANSFER:
        if (value == null) {
          unsetTransfer();
        } else {
          setTransfer((TransferID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case CADIDATE:
        return getCadidate();

      case TRANSFER:
        return getTransfer();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case CADIDATE:
        return isSetCadidate();
      case TRANSFER:
        return isSetTransfer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ElectSwarmLeader_args)
        return this.equals((ElectSwarmLeader_args)that);
      return false;
    }

    public boolean equals(ElectSwarmLeader_args that) {
      if (that == null)
        return false;

      boolean this_present_cadidate = true && this.isSetCadidate();
      boolean that_present_cadidate = true && that.isSetCadidate();
      if (this_present_cadidate || that_present_cadidate) {
        if (!(this_present_cadidate && that_present_cadidate))
          return false;
        if (!this.cadidate.equals(that.cadidate))
          return false;
      }

      boolean this_present_Transfer = true && this.isSetTransfer();
      boolean that_present_Transfer = true && that.isSetTransfer();
      if (this_present_Transfer || that_present_Transfer) {
        if (!(this_present_Transfer && that_present_Transfer))
          return false;
        if (!this.Transfer.equals(that.Transfer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ElectSwarmLeader_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetCadidate()).compareTo(other.isSetCadidate());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCadidate()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cadidate, other.cadidate);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetTransfer()).compareTo(other.isSetTransfer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransfer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Transfer, other.Transfer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ElectSwarmLeader_args(");
      boolean first = true;

      sb.append("cadidate:");
      if (this.cadidate == null) {
        sb.append("null");
      } else {
        sb.append(this.cadidate);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("Transfer:");
      if (this.Transfer == null) {
        sb.append("null");
      } else {
        sb.append(this.Transfer);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (cadidate != null) {
        cadidate.validate();
      }
      if (Transfer != null) {
        Transfer.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ElectSwarmLeader_argsStandardSchemeFactory implements SchemeFactory {
      public ElectSwarmLeader_argsStandardScheme getScheme() {
        return new ElectSwarmLeader_argsStandardScheme();
      }
    }

    private static class ElectSwarmLeader_argsStandardScheme extends StandardScheme<ElectSwarmLeader_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ElectSwarmLeader_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CADIDATE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.cadidate = new NodeID();
                struct.cadidate.read(iprot);
                struct.setCadidateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TRANSFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.Transfer = new TransferID();
                struct.Transfer.read(iprot);
                struct.setTransferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ElectSwarmLeader_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cadidate != null) {
          oprot.writeFieldBegin(CADIDATE_FIELD_DESC);
          struct.cadidate.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.Transfer != null) {
          oprot.writeFieldBegin(TRANSFER_FIELD_DESC);
          struct.Transfer.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ElectSwarmLeader_argsTupleSchemeFactory implements SchemeFactory {
      public ElectSwarmLeader_argsTupleScheme getScheme() {
        return new ElectSwarmLeader_argsTupleScheme();
      }
    }

    private static class ElectSwarmLeader_argsTupleScheme extends TupleScheme<ElectSwarmLeader_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ElectSwarmLeader_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetCadidate()) {
          optionals.set(0);
        }
        if (struct.isSetTransfer()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCadidate()) {
          struct.cadidate.write(oprot);
        }
        if (struct.isSetTransfer()) {
          struct.Transfer.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ElectSwarmLeader_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cadidate = new NodeID();
          struct.cadidate.read(iprot);
          struct.setCadidateIsSet(true);
        }
        if (incoming.get(1)) {
          struct.Transfer = new TransferID();
          struct.Transfer.read(iprot);
          struct.setTransferIsSet(true);
        }
      }
    }

  }

  public static class ElectSwarmLeader_result implements org.apache.thrift.TBase<ElectSwarmLeader_result, ElectSwarmLeader_result._Fields>, java.io.Serializable, Cloneable, Comparable<ElectSwarmLeader_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ElectSwarmLeader_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.BOOL, (short)0);
    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ElectSwarmLeader_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ElectSwarmLeader_resultTupleSchemeFactory());
    }

    public boolean success; // required
    public NotSwarmMemeber exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success"),
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SUCCESS_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ElectSwarmLeader_result.class, metaDataMap);
    }

    public ElectSwarmLeader_result() {
    }

    public ElectSwarmLeader_result(
      boolean success,
      NotSwarmMemeber exc)
    {
      this();
      this.success = success;
      setSuccessIsSet(true);
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ElectSwarmLeader_result(ElectSwarmLeader_result other) {
      __isset_bitfield = other.__isset_bitfield;
      this.success = other.success;
      if (other.isSetExc()) {
        this.exc = new NotSwarmMemeber(other.exc);
      }
    }

    public ElectSwarmLeader_result deepCopy() {
      return new ElectSwarmLeader_result(this);
    }

    @Override
    public void clear() {
      setSuccessIsSet(false);
      this.success = false;
      this.exc = null;
    }

    public boolean isSuccess() {
      return this.success;
    }

    public ElectSwarmLeader_result setSuccess(boolean success) {
      this.success = success;
      setSuccessIsSet(true);
      return this;
    }

    public void unsetSuccess() {
      __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return EncodingUtils.testBit(__isset_bitfield, __SUCCESS_ISSET_ID);
    }

    public void setSuccessIsSet(boolean value) {
      __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SUCCESS_ISSET_ID, value);
    }

    public NotSwarmMemeber getExc() {
      return this.exc;
    }

    public ElectSwarmLeader_result setExc(NotSwarmMemeber exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((Boolean)value);
        }
        break;

      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotSwarmMemeber)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return Boolean.valueOf(isSuccess());

      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ElectSwarmLeader_result)
        return this.equals((ElectSwarmLeader_result)that);
      return false;
    }

    public boolean equals(ElectSwarmLeader_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true;
      boolean that_present_success = true;
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (this.success != that.success)
          return false;
      }

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ElectSwarmLeader_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ElectSwarmLeader_result(");
      boolean first = true;

      sb.append("success:");
      sb.append(this.success);
      first = false;
      if (!first) sb.append(", ");
      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ElectSwarmLeader_resultStandardSchemeFactory implements SchemeFactory {
      public ElectSwarmLeader_resultStandardScheme getScheme() {
        return new ElectSwarmLeader_resultStandardScheme();
      }
    }

    private static class ElectSwarmLeader_resultStandardScheme extends StandardScheme<ElectSwarmLeader_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ElectSwarmLeader_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.success = iprot.readBool();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotSwarmMemeber();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ElectSwarmLeader_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.isSetSuccess()) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeBool(struct.success);
          oprot.writeFieldEnd();
        }
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ElectSwarmLeader_resultTupleSchemeFactory implements SchemeFactory {
      public ElectSwarmLeader_resultTupleScheme getScheme() {
        return new ElectSwarmLeader_resultTupleScheme();
      }
    }

    private static class ElectSwarmLeader_resultTupleScheme extends TupleScheme<ElectSwarmLeader_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ElectSwarmLeader_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        if (struct.isSetExc()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetSuccess()) {
          oprot.writeBool(struct.success);
        }
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ElectSwarmLeader_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.success = iprot.readBool();
          struct.setSuccessIsSet(true);
        }
        if (incoming.get(1)) {
          struct.exc = new NotSwarmMemeber();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class ElectionEndedSwarm_args implements org.apache.thrift.TBase<ElectionEndedSwarm_args, ElectionEndedSwarm_args._Fields>, java.io.Serializable, Cloneable, Comparable<ElectionEndedSwarm_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ElectionEndedSwarm_args");

    private static final org.apache.thrift.protocol.TField SWARM_FIELD_DESC = new org.apache.thrift.protocol.TField("swarm", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ElectionEndedSwarm_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ElectionEndedSwarm_argsTupleSchemeFactory());
    }

    public Swarm swarm; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SWARM((short)1, "swarm");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SWARM
            return SWARM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SWARM, new org.apache.thrift.meta_data.FieldMetaData("swarm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Swarm.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ElectionEndedSwarm_args.class, metaDataMap);
    }

    public ElectionEndedSwarm_args() {
    }

    public ElectionEndedSwarm_args(
      Swarm swarm)
    {
      this();
      this.swarm = swarm;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ElectionEndedSwarm_args(ElectionEndedSwarm_args other) {
      if (other.isSetSwarm()) {
        this.swarm = new Swarm(other.swarm);
      }
    }

    public ElectionEndedSwarm_args deepCopy() {
      return new ElectionEndedSwarm_args(this);
    }

    @Override
    public void clear() {
      this.swarm = null;
    }

    public Swarm getSwarm() {
      return this.swarm;
    }

    public ElectionEndedSwarm_args setSwarm(Swarm swarm) {
      this.swarm = swarm;
      return this;
    }

    public void unsetSwarm() {
      this.swarm = null;
    }

    /** Returns true if field swarm is set (has been assigned a value) and false otherwise */
    public boolean isSetSwarm() {
      return this.swarm != null;
    }

    public void setSwarmIsSet(boolean value) {
      if (!value) {
        this.swarm = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SWARM:
        if (value == null) {
          unsetSwarm();
        } else {
          setSwarm((Swarm)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SWARM:
        return getSwarm();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SWARM:
        return isSetSwarm();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ElectionEndedSwarm_args)
        return this.equals((ElectionEndedSwarm_args)that);
      return false;
    }

    public boolean equals(ElectionEndedSwarm_args that) {
      if (that == null)
        return false;

      boolean this_present_swarm = true && this.isSetSwarm();
      boolean that_present_swarm = true && that.isSetSwarm();
      if (this_present_swarm || that_present_swarm) {
        if (!(this_present_swarm && that_present_swarm))
          return false;
        if (!this.swarm.equals(that.swarm))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ElectionEndedSwarm_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSwarm()).compareTo(other.isSetSwarm());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSwarm()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.swarm, other.swarm);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ElectionEndedSwarm_args(");
      boolean first = true;

      sb.append("swarm:");
      if (this.swarm == null) {
        sb.append("null");
      } else {
        sb.append(this.swarm);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (swarm != null) {
        swarm.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ElectionEndedSwarm_argsStandardSchemeFactory implements SchemeFactory {
      public ElectionEndedSwarm_argsStandardScheme getScheme() {
        return new ElectionEndedSwarm_argsStandardScheme();
      }
    }

    private static class ElectionEndedSwarm_argsStandardScheme extends StandardScheme<ElectionEndedSwarm_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ElectionEndedSwarm_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SWARM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.swarm = new Swarm();
                struct.swarm.read(iprot);
                struct.setSwarmIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ElectionEndedSwarm_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.swarm != null) {
          oprot.writeFieldBegin(SWARM_FIELD_DESC);
          struct.swarm.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ElectionEndedSwarm_argsTupleSchemeFactory implements SchemeFactory {
      public ElectionEndedSwarm_argsTupleScheme getScheme() {
        return new ElectionEndedSwarm_argsTupleScheme();
      }
    }

    private static class ElectionEndedSwarm_argsTupleScheme extends TupleScheme<ElectionEndedSwarm_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ElectionEndedSwarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSwarm()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSwarm()) {
          struct.swarm.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ElectionEndedSwarm_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.swarm = new Swarm();
          struct.swarm.read(iprot);
          struct.setSwarmIsSet(true);
        }
      }
    }

  }

  public static class ElectionEndedSwarm_result implements org.apache.thrift.TBase<ElectionEndedSwarm_result, ElectionEndedSwarm_result._Fields>, java.io.Serializable, Cloneable, Comparable<ElectionEndedSwarm_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("ElectionEndedSwarm_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new ElectionEndedSwarm_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new ElectionEndedSwarm_resultTupleSchemeFactory());
    }

    public NotSwarmMemeber exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(ElectionEndedSwarm_result.class, metaDataMap);
    }

    public ElectionEndedSwarm_result() {
    }

    public ElectionEndedSwarm_result(
      NotSwarmMemeber exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public ElectionEndedSwarm_result(ElectionEndedSwarm_result other) {
      if (other.isSetExc()) {
        this.exc = new NotSwarmMemeber(other.exc);
      }
    }

    public ElectionEndedSwarm_result deepCopy() {
      return new ElectionEndedSwarm_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public NotSwarmMemeber getExc() {
      return this.exc;
    }

    public ElectionEndedSwarm_result setExc(NotSwarmMemeber exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotSwarmMemeber)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof ElectionEndedSwarm_result)
        return this.equals((ElectionEndedSwarm_result)that);
      return false;
    }

    public boolean equals(ElectionEndedSwarm_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(ElectionEndedSwarm_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("ElectionEndedSwarm_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class ElectionEndedSwarm_resultStandardSchemeFactory implements SchemeFactory {
      public ElectionEndedSwarm_resultStandardScheme getScheme() {
        return new ElectionEndedSwarm_resultStandardScheme();
      }
    }

    private static class ElectionEndedSwarm_resultStandardScheme extends StandardScheme<ElectionEndedSwarm_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, ElectionEndedSwarm_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotSwarmMemeber();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, ElectionEndedSwarm_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class ElectionEndedSwarm_resultTupleSchemeFactory implements SchemeFactory {
      public ElectionEndedSwarm_resultTupleScheme getScheme() {
        return new ElectionEndedSwarm_resultTupleScheme();
      }
    }

    private static class ElectionEndedSwarm_resultTupleScheme extends TupleScheme<ElectionEndedSwarm_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, ElectionEndedSwarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, ElectionEndedSwarm_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new NotSwarmMemeber();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class DeliverTransfer_args implements org.apache.thrift.TBase<DeliverTransfer_args, DeliverTransfer_args._Fields>, java.io.Serializable, Cloneable, Comparable<DeliverTransfer_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeliverTransfer_args");

    private static final org.apache.thrift.protocol.TField TRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("transfer", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeliverTransfer_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeliverTransfer_argsTupleSchemeFactory());
    }

    public TransferData transfer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSFER((short)1, "transfer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSFER
            return TRANSFER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSFER, new org.apache.thrift.meta_data.FieldMetaData("transfer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferData.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeliverTransfer_args.class, metaDataMap);
    }

    public DeliverTransfer_args() {
    }

    public DeliverTransfer_args(
      TransferData transfer)
    {
      this();
      this.transfer = transfer;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeliverTransfer_args(DeliverTransfer_args other) {
      if (other.isSetTransfer()) {
        this.transfer = new TransferData(other.transfer);
      }
    }

    public DeliverTransfer_args deepCopy() {
      return new DeliverTransfer_args(this);
    }

    @Override
    public void clear() {
      this.transfer = null;
    }

    public TransferData getTransfer() {
      return this.transfer;
    }

    public DeliverTransfer_args setTransfer(TransferData transfer) {
      this.transfer = transfer;
      return this;
    }

    public void unsetTransfer() {
      this.transfer = null;
    }

    /** Returns true if field transfer is set (has been assigned a value) and false otherwise */
    public boolean isSetTransfer() {
      return this.transfer != null;
    }

    public void setTransferIsSet(boolean value) {
      if (!value) {
        this.transfer = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSFER:
        if (value == null) {
          unsetTransfer();
        } else {
          setTransfer((TransferData)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSFER:
        return getTransfer();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSFER:
        return isSetTransfer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeliverTransfer_args)
        return this.equals((DeliverTransfer_args)that);
      return false;
    }

    public boolean equals(DeliverTransfer_args that) {
      if (that == null)
        return false;

      boolean this_present_transfer = true && this.isSetTransfer();
      boolean that_present_transfer = true && that.isSetTransfer();
      if (this_present_transfer || that_present_transfer) {
        if (!(this_present_transfer && that_present_transfer))
          return false;
        if (!this.transfer.equals(that.transfer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(DeliverTransfer_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransfer()).compareTo(other.isSetTransfer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransfer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transfer, other.transfer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeliverTransfer_args(");
      boolean first = true;

      sb.append("transfer:");
      if (this.transfer == null) {
        sb.append("null");
      } else {
        sb.append(this.transfer);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transfer != null) {
        transfer.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeliverTransfer_argsStandardSchemeFactory implements SchemeFactory {
      public DeliverTransfer_argsStandardScheme getScheme() {
        return new DeliverTransfer_argsStandardScheme();
      }
    }

    private static class DeliverTransfer_argsStandardScheme extends StandardScheme<DeliverTransfer_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeliverTransfer_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transfer = new TransferData();
                struct.transfer.read(iprot);
                struct.setTransferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeliverTransfer_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transfer != null) {
          oprot.writeFieldBegin(TRANSFER_FIELD_DESC);
          struct.transfer.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeliverTransfer_argsTupleSchemeFactory implements SchemeFactory {
      public DeliverTransfer_argsTupleScheme getScheme() {
        return new DeliverTransfer_argsTupleScheme();
      }
    }

    private static class DeliverTransfer_argsTupleScheme extends TupleScheme<DeliverTransfer_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeliverTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransfer()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransfer()) {
          struct.transfer.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeliverTransfer_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.transfer = new TransferData();
          struct.transfer.read(iprot);
          struct.setTransferIsSet(true);
        }
      }
    }

  }

  public static class DeliverTransfer_result implements org.apache.thrift.TBase<DeliverTransfer_result, DeliverTransfer_result._Fields>, java.io.Serializable, Cloneable, Comparable<DeliverTransfer_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("DeliverTransfer_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new DeliverTransfer_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new DeliverTransfer_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DeliverTransfer_result.class, metaDataMap);
    }

    public DeliverTransfer_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public DeliverTransfer_result(DeliverTransfer_result other) {
    }

    public DeliverTransfer_result deepCopy() {
      return new DeliverTransfer_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof DeliverTransfer_result)
        return this.equals((DeliverTransfer_result)that);
      return false;
    }

    public boolean equals(DeliverTransfer_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(DeliverTransfer_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("DeliverTransfer_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class DeliverTransfer_resultStandardSchemeFactory implements SchemeFactory {
      public DeliverTransfer_resultStandardScheme getScheme() {
        return new DeliverTransfer_resultStandardScheme();
      }
    }

    private static class DeliverTransfer_resultStandardScheme extends StandardScheme<DeliverTransfer_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, DeliverTransfer_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, DeliverTransfer_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class DeliverTransfer_resultTupleSchemeFactory implements SchemeFactory {
      public DeliverTransfer_resultTupleScheme getScheme() {
        return new DeliverTransfer_resultTupleScheme();
      }
    }

    private static class DeliverTransfer_resultTupleScheme extends TupleScheme<DeliverTransfer_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, DeliverTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, DeliverTransfer_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetSwarmList_args implements org.apache.thrift.TBase<GetSwarmList_args, GetSwarmList_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetSwarmList_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSwarmList_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSwarmList_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSwarmList_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSwarmList_args.class, metaDataMap);
    }

    public GetSwarmList_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSwarmList_args(GetSwarmList_args other) {
    }

    public GetSwarmList_args deepCopy() {
      return new GetSwarmList_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSwarmList_args)
        return this.equals((GetSwarmList_args)that);
      return false;
    }

    public boolean equals(GetSwarmList_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSwarmList_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSwarmList_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSwarmList_argsStandardSchemeFactory implements SchemeFactory {
      public GetSwarmList_argsStandardScheme getScheme() {
        return new GetSwarmList_argsStandardScheme();
      }
    }

    private static class GetSwarmList_argsStandardScheme extends StandardScheme<GetSwarmList_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSwarmList_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSwarmList_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSwarmList_argsTupleSchemeFactory implements SchemeFactory {
      public GetSwarmList_argsTupleScheme getScheme() {
        return new GetSwarmList_argsTupleScheme();
      }
    }

    private static class GetSwarmList_argsTupleScheme extends TupleScheme<GetSwarmList_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSwarmList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSwarmList_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetSwarmList_result implements org.apache.thrift.TBase<GetSwarmList_result, GetSwarmList_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetSwarmList_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetSwarmList_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetSwarmList_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetSwarmList_resultTupleSchemeFactory());
    }

    public List<Swarm> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, Swarm.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetSwarmList_result.class, metaDataMap);
    }

    public GetSwarmList_result() {
    }

    public GetSwarmList_result(
      List<Swarm> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetSwarmList_result(GetSwarmList_result other) {
      if (other.isSetSuccess()) {
        List<Swarm> __this__success = new ArrayList<Swarm>(other.success.size());
        for (Swarm other_element : other.success) {
          __this__success.add(new Swarm(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetSwarmList_result deepCopy() {
      return new GetSwarmList_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<Swarm> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(Swarm elem) {
      if (this.success == null) {
        this.success = new ArrayList<Swarm>();
      }
      this.success.add(elem);
    }

    public List<Swarm> getSuccess() {
      return this.success;
    }

    public GetSwarmList_result setSuccess(List<Swarm> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<Swarm>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetSwarmList_result)
        return this.equals((GetSwarmList_result)that);
      return false;
    }

    public boolean equals(GetSwarmList_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetSwarmList_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetSwarmList_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetSwarmList_resultStandardSchemeFactory implements SchemeFactory {
      public GetSwarmList_resultStandardScheme getScheme() {
        return new GetSwarmList_resultStandardScheme();
      }
    }

    private static class GetSwarmList_resultStandardScheme extends StandardScheme<GetSwarmList_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetSwarmList_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.success = new ArrayList<Swarm>(_list8.size);
                  for (int _i9 = 0; _i9 < _list8.size; ++_i9)
                  {
                    Swarm _elem10;
                    _elem10 = new Swarm();
                    _elem10.read(iprot);
                    struct.success.add(_elem10);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetSwarmList_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (Swarm _iter11 : struct.success)
            {
              _iter11.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetSwarmList_resultTupleSchemeFactory implements SchemeFactory {
      public GetSwarmList_resultTupleScheme getScheme() {
        return new GetSwarmList_resultTupleScheme();
      }
    }

    private static class GetSwarmList_resultTupleScheme extends TupleScheme<GetSwarmList_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetSwarmList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (Swarm _iter12 : struct.success)
            {
              _iter12.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetSwarmList_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<Swarm>(_list13.size);
            for (int _i14 = 0; _i14 < _list13.size; ++_i14)
            {
              Swarm _elem15;
              _elem15 = new Swarm();
              _elem15.read(iprot);
              struct.success.add(_elem15);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class startSwarmElection_args implements org.apache.thrift.TBase<startSwarmElection_args, startSwarmElection_args._Fields>, java.io.Serializable, Cloneable, Comparable<startSwarmElection_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startSwarmElection_args");

    private static final org.apache.thrift.protocol.TField TRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("transfer", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startSwarmElection_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startSwarmElection_argsTupleSchemeFactory());
    }

    public TransferID transfer; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TRANSFER((short)1, "transfer");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TRANSFER
            return TRANSFER;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TRANSFER, new org.apache.thrift.meta_data.FieldMetaData("transfer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferID.class)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startSwarmElection_args.class, metaDataMap);
    }

    public startSwarmElection_args() {
    }

    public startSwarmElection_args(
      TransferID transfer)
    {
      this();
      this.transfer = transfer;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startSwarmElection_args(startSwarmElection_args other) {
      if (other.isSetTransfer()) {
        this.transfer = new TransferID(other.transfer);
      }
    }

    public startSwarmElection_args deepCopy() {
      return new startSwarmElection_args(this);
    }

    @Override
    public void clear() {
      this.transfer = null;
    }

    public TransferID getTransfer() {
      return this.transfer;
    }

    public startSwarmElection_args setTransfer(TransferID transfer) {
      this.transfer = transfer;
      return this;
    }

    public void unsetTransfer() {
      this.transfer = null;
    }

    /** Returns true if field transfer is set (has been assigned a value) and false otherwise */
    public boolean isSetTransfer() {
      return this.transfer != null;
    }

    public void setTransferIsSet(boolean value) {
      if (!value) {
        this.transfer = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case TRANSFER:
        if (value == null) {
          unsetTransfer();
        } else {
          setTransfer((TransferID)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case TRANSFER:
        return getTransfer();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case TRANSFER:
        return isSetTransfer();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startSwarmElection_args)
        return this.equals((startSwarmElection_args)that);
      return false;
    }

    public boolean equals(startSwarmElection_args that) {
      if (that == null)
        return false;

      boolean this_present_transfer = true && this.isSetTransfer();
      boolean that_present_transfer = true && that.isSetTransfer();
      if (this_present_transfer || that_present_transfer) {
        if (!(this_present_transfer && that_present_transfer))
          return false;
        if (!this.transfer.equals(that.transfer))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(startSwarmElection_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetTransfer()).compareTo(other.isSetTransfer());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTransfer()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.transfer, other.transfer);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startSwarmElection_args(");
      boolean first = true;

      sb.append("transfer:");
      if (this.transfer == null) {
        sb.append("null");
      } else {
        sb.append(this.transfer);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (transfer != null) {
        transfer.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startSwarmElection_argsStandardSchemeFactory implements SchemeFactory {
      public startSwarmElection_argsStandardScheme getScheme() {
        return new startSwarmElection_argsStandardScheme();
      }
    }

    private static class startSwarmElection_argsStandardScheme extends StandardScheme<startSwarmElection_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startSwarmElection_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TRANSFER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.transfer = new TransferID();
                struct.transfer.read(iprot);
                struct.setTransferIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startSwarmElection_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.transfer != null) {
          oprot.writeFieldBegin(TRANSFER_FIELD_DESC);
          struct.transfer.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startSwarmElection_argsTupleSchemeFactory implements SchemeFactory {
      public startSwarmElection_argsTupleScheme getScheme() {
        return new startSwarmElection_argsTupleScheme();
      }
    }

    private static class startSwarmElection_argsTupleScheme extends TupleScheme<startSwarmElection_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startSwarmElection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetTransfer()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTransfer()) {
          struct.transfer.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startSwarmElection_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.transfer = new TransferID();
          struct.transfer.read(iprot);
          struct.setTransferIsSet(true);
        }
      }
    }

  }

  public static class startSwarmElection_result implements org.apache.thrift.TBase<startSwarmElection_result, startSwarmElection_result._Fields>, java.io.Serializable, Cloneable, Comparable<startSwarmElection_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("startSwarmElection_result");

    private static final org.apache.thrift.protocol.TField EXC_FIELD_DESC = new org.apache.thrift.protocol.TField("exc", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new startSwarmElection_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new startSwarmElection_resultTupleSchemeFactory());
    }

    public NotSwarmMemeber exc; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      EXC((short)1, "exc");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // EXC
            return EXC;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.EXC, new org.apache.thrift.meta_data.FieldMetaData("exc", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT)));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(startSwarmElection_result.class, metaDataMap);
    }

    public startSwarmElection_result() {
    }

    public startSwarmElection_result(
      NotSwarmMemeber exc)
    {
      this();
      this.exc = exc;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public startSwarmElection_result(startSwarmElection_result other) {
      if (other.isSetExc()) {
        this.exc = new NotSwarmMemeber(other.exc);
      }
    }

    public startSwarmElection_result deepCopy() {
      return new startSwarmElection_result(this);
    }

    @Override
    public void clear() {
      this.exc = null;
    }

    public NotSwarmMemeber getExc() {
      return this.exc;
    }

    public startSwarmElection_result setExc(NotSwarmMemeber exc) {
      this.exc = exc;
      return this;
    }

    public void unsetExc() {
      this.exc = null;
    }

    /** Returns true if field exc is set (has been assigned a value) and false otherwise */
    public boolean isSetExc() {
      return this.exc != null;
    }

    public void setExcIsSet(boolean value) {
      if (!value) {
        this.exc = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case EXC:
        if (value == null) {
          unsetExc();
        } else {
          setExc((NotSwarmMemeber)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case EXC:
        return getExc();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case EXC:
        return isSetExc();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof startSwarmElection_result)
        return this.equals((startSwarmElection_result)that);
      return false;
    }

    public boolean equals(startSwarmElection_result that) {
      if (that == null)
        return false;

      boolean this_present_exc = true && this.isSetExc();
      boolean that_present_exc = true && that.isSetExc();
      if (this_present_exc || that_present_exc) {
        if (!(this_present_exc && that_present_exc))
          return false;
        if (!this.exc.equals(that.exc))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(startSwarmElection_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetExc()).compareTo(other.isSetExc());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetExc()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.exc, other.exc);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("startSwarmElection_result(");
      boolean first = true;

      sb.append("exc:");
      if (this.exc == null) {
        sb.append("null");
      } else {
        sb.append(this.exc);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class startSwarmElection_resultStandardSchemeFactory implements SchemeFactory {
      public startSwarmElection_resultStandardScheme getScheme() {
        return new startSwarmElection_resultStandardScheme();
      }
    }

    private static class startSwarmElection_resultStandardScheme extends StandardScheme<startSwarmElection_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, startSwarmElection_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // EXC
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.exc = new NotSwarmMemeber();
                struct.exc.read(iprot);
                struct.setExcIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, startSwarmElection_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.exc != null) {
          oprot.writeFieldBegin(EXC_FIELD_DESC);
          struct.exc.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class startSwarmElection_resultTupleSchemeFactory implements SchemeFactory {
      public startSwarmElection_resultTupleScheme getScheme() {
        return new startSwarmElection_resultTupleScheme();
      }
    }

    private static class startSwarmElection_resultTupleScheme extends TupleScheme<startSwarmElection_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, startSwarmElection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetExc()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetExc()) {
          struct.exc.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, startSwarmElection_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.exc = new NotSwarmMemeber();
          struct.exc.read(iprot);
          struct.setExcIsSet(true);
        }
      }
    }

  }

  public static class GetTransfers_args implements org.apache.thrift.TBase<GetTransfers_args, GetTransfers_args._Fields>, java.io.Serializable, Cloneable, Comparable<GetTransfers_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTransfers_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetTransfers_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetTransfers_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTransfers_args.class, metaDataMap);
    }

    public GetTransfers_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTransfers_args(GetTransfers_args other) {
    }

    public GetTransfers_args deepCopy() {
      return new GetTransfers_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTransfers_args)
        return this.equals((GetTransfers_args)that);
      return false;
    }

    public boolean equals(GetTransfers_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetTransfers_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetTransfers_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTransfers_argsStandardSchemeFactory implements SchemeFactory {
      public GetTransfers_argsStandardScheme getScheme() {
        return new GetTransfers_argsStandardScheme();
      }
    }

    private static class GetTransfers_argsStandardScheme extends StandardScheme<GetTransfers_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTransfers_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTransfers_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTransfers_argsTupleSchemeFactory implements SchemeFactory {
      public GetTransfers_argsTupleScheme getScheme() {
        return new GetTransfers_argsTupleScheme();
      }
    }

    private static class GetTransfers_argsTupleScheme extends TupleScheme<GetTransfers_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTransfers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTransfers_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class GetTransfers_result implements org.apache.thrift.TBase<GetTransfers_result, GetTransfers_result._Fields>, java.io.Serializable, Cloneable, Comparable<GetTransfers_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("GetTransfers_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.LIST, (short)0);

    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new GetTransfers_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new GetTransfers_resultTupleSchemeFactory());
    }

    public List<TransferData> success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferData.class))));
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(GetTransfers_result.class, metaDataMap);
    }

    public GetTransfers_result() {
    }

    public GetTransfers_result(
      List<TransferData> success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public GetTransfers_result(GetTransfers_result other) {
      if (other.isSetSuccess()) {
        List<TransferData> __this__success = new ArrayList<TransferData>(other.success.size());
        for (TransferData other_element : other.success) {
          __this__success.add(new TransferData(other_element));
        }
        this.success = __this__success;
      }
    }

    public GetTransfers_result deepCopy() {
      return new GetTransfers_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public int getSuccessSize() {
      return (this.success == null) ? 0 : this.success.size();
    }

    public java.util.Iterator<TransferData> getSuccessIterator() {
      return (this.success == null) ? null : this.success.iterator();
    }

    public void addToSuccess(TransferData elem) {
      if (this.success == null) {
        this.success = new ArrayList<TransferData>();
      }
      this.success.add(elem);
    }

    public List<TransferData> getSuccess() {
      return this.success;
    }

    public GetTransfers_result setSuccess(List<TransferData> success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((List<TransferData>)value);
        }
        break;

      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof GetTransfers_result)
        return this.equals((GetTransfers_result)that);
      return false;
    }

    public boolean equals(GetTransfers_result that) {
      if (that == null)
        return false;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(GetTransfers_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("GetTransfers_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class GetTransfers_resultStandardSchemeFactory implements SchemeFactory {
      public GetTransfers_resultStandardScheme getScheme() {
        return new GetTransfers_resultStandardScheme();
      }
    }

    private static class GetTransfers_resultStandardScheme extends StandardScheme<GetTransfers_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, GetTransfers_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list16 = iprot.readListBegin();
                  struct.success = new ArrayList<TransferData>(_list16.size);
                  for (int _i17 = 0; _i17 < _list16.size; ++_i17)
                  {
                    TransferData _elem18;
                    _elem18 = new TransferData();
                    _elem18.read(iprot);
                    struct.success.add(_elem18);
                  }
                  iprot.readListEnd();
                }
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, GetTransfers_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.success.size()));
            for (TransferData _iter19 : struct.success)
            {
              _iter19.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class GetTransfers_resultTupleSchemeFactory implements SchemeFactory {
      public GetTransfers_resultTupleScheme getScheme() {
        return new GetTransfers_resultTupleScheme();
      }
    }

    private static class GetTransfers_resultTupleScheme extends TupleScheme<GetTransfers_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, GetTransfers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
        BitSet optionals = new BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          {
            oprot.writeI32(struct.success.size());
            for (TransferData _iter20 : struct.success)
            {
              _iter20.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, GetTransfers_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
        BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          {
            org.apache.thrift.protocol.TList _list21 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.success = new ArrayList<TransferData>(_list21.size);
            for (int _i22 = 0; _i22 < _list21.size; ++_i22)
            {
              TransferData _elem23;
              _elem23 = new TransferData();
              _elem23.read(iprot);
              struct.success.add(_elem23);
            }
          }
          struct.setSuccessIsSet(true);
        }
      }
    }

  }

  public static class stop_args implements org.apache.thrift.TBase<stop_args, stop_args._Fields>, java.io.Serializable, Cloneable, Comparable<stop_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stop_args");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stop_argsStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stop_argsTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stop_args.class, metaDataMap);
    }

    public stop_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stop_args(stop_args other) {
    }

    public stop_args deepCopy() {
      return new stop_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stop_args)
        return this.equals((stop_args)that);
      return false;
    }

    public boolean equals(stop_args that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(stop_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
    }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stop_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stop_argsStandardSchemeFactory implements SchemeFactory {
      public stop_argsStandardScheme getScheme() {
        return new stop_argsStandardScheme();
      }
    }

    private static class stop_argsStandardScheme extends StandardScheme<stop_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stop_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stop_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stop_argsTupleSchemeFactory implements SchemeFactory {
      public stop_argsTupleScheme getScheme() {
        return new stop_argsTupleScheme();
      }
    }

    private static class stop_argsTupleScheme extends TupleScheme<stop_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stop_args struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

  public static class stop_result implements org.apache.thrift.TBase<stop_result, stop_result._Fields>, java.io.Serializable, Cloneable, Comparable<stop_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("stop_result");


    private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
    static {
      schemes.put(StandardScheme.class, new stop_resultStandardSchemeFactory());
      schemes.put(TupleScheme.class, new stop_resultTupleSchemeFactory());
    }


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

      static {
        for (_Fields field : EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final String _fieldName;

      _Fields(short thriftId, String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public String getFieldName() {
        return _fieldName;
      }
    }
    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(stop_result.class, metaDataMap);
    }

    public stop_result() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public stop_result(stop_result other) {
    }

    public stop_result deepCopy() {
      return new stop_result(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, Object value) {
      switch (field) {
      }
    }

    public Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new IllegalArgumentException();
      }

      switch (field) {
      }
      throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
      if (that == null)
        return false;
      if (that instanceof stop_result)
        return this.equals((stop_result)that);
      return false;
    }

    public boolean equals(stop_result that) {
      if (that == null)
        return false;

      return true;
    }

    @Override
    public int hashCode() {
      return 0;
    }

    @Override
    public int compareTo(stop_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
      }

    @Override
    public String toString() {
      StringBuilder sb = new StringBuilder("stop_result(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class stop_resultStandardSchemeFactory implements SchemeFactory {
      public stop_resultStandardScheme getScheme() {
        return new stop_resultStandardScheme();
      }
    }

    private static class stop_resultStandardScheme extends StandardScheme<stop_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, stop_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, stop_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class stop_resultTupleSchemeFactory implements SchemeFactory {
      public stop_resultTupleScheme getScheme() {
        return new stop_resultTupleScheme();
      }
    }

    private static class stop_resultTupleScheme extends TupleScheme<stop_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, stop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol oprot = (TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, stop_result struct) throws org.apache.thrift.TException {
        TTupleProtocol iprot = (TTupleProtocol) prot;
      }
    }

  }

}
