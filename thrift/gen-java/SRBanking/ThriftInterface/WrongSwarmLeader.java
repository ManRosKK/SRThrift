/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package SRBanking.ThriftInterface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class WrongSwarmLeader extends TException implements org.apache.thrift.TBase<WrongSwarmLeader, WrongSwarmLeader._Fields>, java.io.Serializable, Cloneable, Comparable<WrongSwarmLeader> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("WrongSwarmLeader");

  private static final org.apache.thrift.protocol.TField RECEIVER_NODE_FIELD_DESC = new org.apache.thrift.protocol.TField("ReceiverNode", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField LEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("Leader", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField TRANSFER_FIELD_DESC = new org.apache.thrift.protocol.TField("Transfer", org.apache.thrift.protocol.TType.STRUCT, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new WrongSwarmLeaderStandardSchemeFactory());
    schemes.put(TupleScheme.class, new WrongSwarmLeaderTupleSchemeFactory());
  }

  public NodeID ReceiverNode; // required
  public NodeID Leader; // required
  public TransferID Transfer; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    RECEIVER_NODE((short)1, "ReceiverNode"),
    LEADER((short)2, "Leader"),
    TRANSFER((short)3, "Transfer");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // RECEIVER_NODE
          return RECEIVER_NODE;
        case 2: // LEADER
          return LEADER;
        case 3: // TRANSFER
          return TRANSFER;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.RECEIVER_NODE, new org.apache.thrift.meta_data.FieldMetaData("ReceiverNode", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeID.class)));
    tmpMap.put(_Fields.LEADER, new org.apache.thrift.meta_data.FieldMetaData("Leader", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeID.class)));
    tmpMap.put(_Fields.TRANSFER, new org.apache.thrift.meta_data.FieldMetaData("Transfer", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TransferID.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(WrongSwarmLeader.class, metaDataMap);
  }

  public WrongSwarmLeader() {
  }

  public WrongSwarmLeader(
    NodeID ReceiverNode,
    NodeID Leader,
    TransferID Transfer)
  {
    this();
    this.ReceiverNode = ReceiverNode;
    this.Leader = Leader;
    this.Transfer = Transfer;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public WrongSwarmLeader(WrongSwarmLeader other) {
    if (other.isSetReceiverNode()) {
      this.ReceiverNode = new NodeID(other.ReceiverNode);
    }
    if (other.isSetLeader()) {
      this.Leader = new NodeID(other.Leader);
    }
    if (other.isSetTransfer()) {
      this.Transfer = new TransferID(other.Transfer);
    }
  }

  public WrongSwarmLeader deepCopy() {
    return new WrongSwarmLeader(this);
  }

  @Override
  public void clear() {
    this.ReceiverNode = null;
    this.Leader = null;
    this.Transfer = null;
  }

  public NodeID getReceiverNode() {
    return this.ReceiverNode;
  }

  public WrongSwarmLeader setReceiverNode(NodeID ReceiverNode) {
    this.ReceiverNode = ReceiverNode;
    return this;
  }

  public void unsetReceiverNode() {
    this.ReceiverNode = null;
  }

  /** Returns true if field ReceiverNode is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiverNode() {
    return this.ReceiverNode != null;
  }

  public void setReceiverNodeIsSet(boolean value) {
    if (!value) {
      this.ReceiverNode = null;
    }
  }

  public NodeID getLeader() {
    return this.Leader;
  }

  public WrongSwarmLeader setLeader(NodeID Leader) {
    this.Leader = Leader;
    return this;
  }

  public void unsetLeader() {
    this.Leader = null;
  }

  /** Returns true if field Leader is set (has been assigned a value) and false otherwise */
  public boolean isSetLeader() {
    return this.Leader != null;
  }

  public void setLeaderIsSet(boolean value) {
    if (!value) {
      this.Leader = null;
    }
  }

  public TransferID getTransfer() {
    return this.Transfer;
  }

  public WrongSwarmLeader setTransfer(TransferID Transfer) {
    this.Transfer = Transfer;
    return this;
  }

  public void unsetTransfer() {
    this.Transfer = null;
  }

  /** Returns true if field Transfer is set (has been assigned a value) and false otherwise */
  public boolean isSetTransfer() {
    return this.Transfer != null;
  }

  public void setTransferIsSet(boolean value) {
    if (!value) {
      this.Transfer = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case RECEIVER_NODE:
      if (value == null) {
        unsetReceiverNode();
      } else {
        setReceiverNode((NodeID)value);
      }
      break;

    case LEADER:
      if (value == null) {
        unsetLeader();
      } else {
        setLeader((NodeID)value);
      }
      break;

    case TRANSFER:
      if (value == null) {
        unsetTransfer();
      } else {
        setTransfer((TransferID)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case RECEIVER_NODE:
      return getReceiverNode();

    case LEADER:
      return getLeader();

    case TRANSFER:
      return getTransfer();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case RECEIVER_NODE:
      return isSetReceiverNode();
    case LEADER:
      return isSetLeader();
    case TRANSFER:
      return isSetTransfer();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof WrongSwarmLeader)
      return this.equals((WrongSwarmLeader)that);
    return false;
  }

  public boolean equals(WrongSwarmLeader that) {
    if (that == null)
      return false;

    boolean this_present_ReceiverNode = true && this.isSetReceiverNode();
    boolean that_present_ReceiverNode = true && that.isSetReceiverNode();
    if (this_present_ReceiverNode || that_present_ReceiverNode) {
      if (!(this_present_ReceiverNode && that_present_ReceiverNode))
        return false;
      if (!this.ReceiverNode.equals(that.ReceiverNode))
        return false;
    }

    boolean this_present_Leader = true && this.isSetLeader();
    boolean that_present_Leader = true && that.isSetLeader();
    if (this_present_Leader || that_present_Leader) {
      if (!(this_present_Leader && that_present_Leader))
        return false;
      if (!this.Leader.equals(that.Leader))
        return false;
    }

    boolean this_present_Transfer = true && this.isSetTransfer();
    boolean that_present_Transfer = true && that.isSetTransfer();
    if (this_present_Transfer || that_present_Transfer) {
      if (!(this_present_Transfer && that_present_Transfer))
        return false;
      if (!this.Transfer.equals(that.Transfer))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(WrongSwarmLeader other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetReceiverNode()).compareTo(other.isSetReceiverNode());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiverNode()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ReceiverNode, other.ReceiverNode);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLeader()).compareTo(other.isSetLeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Leader, other.Leader);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetTransfer()).compareTo(other.isSetTransfer());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTransfer()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Transfer, other.Transfer);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("WrongSwarmLeader(");
    boolean first = true;

    sb.append("ReceiverNode:");
    if (this.ReceiverNode == null) {
      sb.append("null");
    } else {
      sb.append(this.ReceiverNode);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Leader:");
    if (this.Leader == null) {
      sb.append("null");
    } else {
      sb.append(this.Leader);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Transfer:");
    if (this.Transfer == null) {
      sb.append("null");
    } else {
      sb.append(this.Transfer);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (ReceiverNode != null) {
      ReceiverNode.validate();
    }
    if (Leader != null) {
      Leader.validate();
    }
    if (Transfer != null) {
      Transfer.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class WrongSwarmLeaderStandardSchemeFactory implements SchemeFactory {
    public WrongSwarmLeaderStandardScheme getScheme() {
      return new WrongSwarmLeaderStandardScheme();
    }
  }

  private static class WrongSwarmLeaderStandardScheme extends StandardScheme<WrongSwarmLeader> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, WrongSwarmLeader struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // RECEIVER_NODE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.ReceiverNode = new NodeID();
              struct.ReceiverNode.read(iprot);
              struct.setReceiverNodeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Leader = new NodeID();
              struct.Leader.read(iprot);
              struct.setLeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // TRANSFER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Transfer = new TransferID();
              struct.Transfer.read(iprot);
              struct.setTransferIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, WrongSwarmLeader struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.ReceiverNode != null) {
        oprot.writeFieldBegin(RECEIVER_NODE_FIELD_DESC);
        struct.ReceiverNode.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Leader != null) {
        oprot.writeFieldBegin(LEADER_FIELD_DESC);
        struct.Leader.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Transfer != null) {
        oprot.writeFieldBegin(TRANSFER_FIELD_DESC);
        struct.Transfer.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class WrongSwarmLeaderTupleSchemeFactory implements SchemeFactory {
    public WrongSwarmLeaderTupleScheme getScheme() {
      return new WrongSwarmLeaderTupleScheme();
    }
  }

  private static class WrongSwarmLeaderTupleScheme extends TupleScheme<WrongSwarmLeader> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, WrongSwarmLeader struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetReceiverNode()) {
        optionals.set(0);
      }
      if (struct.isSetLeader()) {
        optionals.set(1);
      }
      if (struct.isSetTransfer()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetReceiverNode()) {
        struct.ReceiverNode.write(oprot);
      }
      if (struct.isSetLeader()) {
        struct.Leader.write(oprot);
      }
      if (struct.isSetTransfer()) {
        struct.Transfer.write(oprot);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, WrongSwarmLeader struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.ReceiverNode = new NodeID();
        struct.ReceiverNode.read(iprot);
        struct.setReceiverNodeIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Leader = new NodeID();
        struct.Leader.read(iprot);
        struct.setLeaderIsSet(true);
      }
      if (incoming.get(2)) {
        struct.Transfer = new TransferID();
        struct.Transfer.read(iprot);
        struct.setTransferIsSet(true);
      }
    }
  }

}

