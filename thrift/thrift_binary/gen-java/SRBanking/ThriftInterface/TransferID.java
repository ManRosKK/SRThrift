/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package SRBanking.ThriftInterface;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class TransferID implements org.apache.thrift.TBase<TransferID, TransferID._Fields>, java.io.Serializable, Cloneable, Comparable<TransferID> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TransferID");

  private static final org.apache.thrift.protocol.TField SENDER_FIELD_DESC = new org.apache.thrift.protocol.TField("Sender", org.apache.thrift.protocol.TType.STRUCT, (short)1);
  private static final org.apache.thrift.protocol.TField RECEIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("Receiver", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField LP_FIELD_DESC = new org.apache.thrift.protocol.TField("LP", org.apache.thrift.protocol.TType.I64, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TransferIDStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TransferIDTupleSchemeFactory());
  }

  public NodeID Sender; // required
  public NodeID Receiver; // required
  public long LP; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    SENDER((short)1, "Sender"),
    RECEIVER((short)2, "Receiver"),
    LP((short)3, "LP");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // SENDER
          return SENDER;
        case 2: // RECEIVER
          return RECEIVER;
        case 3: // LP
          return LP;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __LP_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.SENDER, new org.apache.thrift.meta_data.FieldMetaData("Sender", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeID.class)));
    tmpMap.put(_Fields.RECEIVER, new org.apache.thrift.meta_data.FieldMetaData("Receiver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, NodeID.class)));
    tmpMap.put(_Fields.LP, new org.apache.thrift.meta_data.FieldMetaData("LP", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TransferID.class, metaDataMap);
  }

  public TransferID() {
  }

  public TransferID(
    NodeID Sender,
    NodeID Receiver,
    long LP)
  {
    this();
    this.Sender = Sender;
    this.Receiver = Receiver;
    this.LP = LP;
    setLPIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TransferID(TransferID other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetSender()) {
      this.Sender = new NodeID(other.Sender);
    }
    if (other.isSetReceiver()) {
      this.Receiver = new NodeID(other.Receiver);
    }
    this.LP = other.LP;
  }

  public TransferID deepCopy() {
    return new TransferID(this);
  }

  @Override
  public void clear() {
    this.Sender = null;
    this.Receiver = null;
    setLPIsSet(false);
    this.LP = 0;
  }

  public NodeID getSender() {
    return this.Sender;
  }

  public TransferID setSender(NodeID Sender) {
    this.Sender = Sender;
    return this;
  }

  public void unsetSender() {
    this.Sender = null;
  }

  /** Returns true if field Sender is set (has been assigned a value) and false otherwise */
  public boolean isSetSender() {
    return this.Sender != null;
  }

  public void setSenderIsSet(boolean value) {
    if (!value) {
      this.Sender = null;
    }
  }

  public NodeID getReceiver() {
    return this.Receiver;
  }

  public TransferID setReceiver(NodeID Receiver) {
    this.Receiver = Receiver;
    return this;
  }

  public void unsetReceiver() {
    this.Receiver = null;
  }

  /** Returns true if field Receiver is set (has been assigned a value) and false otherwise */
  public boolean isSetReceiver() {
    return this.Receiver != null;
  }

  public void setReceiverIsSet(boolean value) {
    if (!value) {
      this.Receiver = null;
    }
  }

  public long getLP() {
    return this.LP;
  }

  public TransferID setLP(long LP) {
    this.LP = LP;
    setLPIsSet(true);
    return this;
  }

  public void unsetLP() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __LP_ISSET_ID);
  }

  /** Returns true if field LP is set (has been assigned a value) and false otherwise */
  public boolean isSetLP() {
    return EncodingUtils.testBit(__isset_bitfield, __LP_ISSET_ID);
  }

  public void setLPIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __LP_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case SENDER:
      if (value == null) {
        unsetSender();
      } else {
        setSender((NodeID)value);
      }
      break;

    case RECEIVER:
      if (value == null) {
        unsetReceiver();
      } else {
        setReceiver((NodeID)value);
      }
      break;

    case LP:
      if (value == null) {
        unsetLP();
      } else {
        setLP((Long)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case SENDER:
      return getSender();

    case RECEIVER:
      return getReceiver();

    case LP:
      return Long.valueOf(getLP());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case SENDER:
      return isSetSender();
    case RECEIVER:
      return isSetReceiver();
    case LP:
      return isSetLP();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TransferID)
      return this.equals((TransferID)that);
    return false;
  }

  public boolean equals(TransferID that) {
    if (that == null)
      return false;

    boolean this_present_Sender = true && this.isSetSender();
    boolean that_present_Sender = true && that.isSetSender();
    if (this_present_Sender || that_present_Sender) {
      if (!(this_present_Sender && that_present_Sender))
        return false;
      if (!this.Sender.equals(that.Sender))
        return false;
    }

    boolean this_present_Receiver = true && this.isSetReceiver();
    boolean that_present_Receiver = true && that.isSetReceiver();
    if (this_present_Receiver || that_present_Receiver) {
      if (!(this_present_Receiver && that_present_Receiver))
        return false;
      if (!this.Receiver.equals(that.Receiver))
        return false;
    }

    boolean this_present_LP = true;
    boolean that_present_LP = true;
    if (this_present_LP || that_present_LP) {
      if (!(this_present_LP && that_present_LP))
        return false;
      if (this.LP != that.LP)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  @Override
  public int compareTo(TransferID other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetSender()).compareTo(other.isSetSender());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSender()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Sender, other.Sender);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetReceiver()).compareTo(other.isSetReceiver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReceiver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.Receiver, other.Receiver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetLP()).compareTo(other.isSetLP());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLP()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.LP, other.LP);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TransferID(");
    boolean first = true;

    sb.append("Sender:");
    if (this.Sender == null) {
      sb.append("null");
    } else {
      sb.append(this.Sender);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("Receiver:");
    if (this.Receiver == null) {
      sb.append("null");
    } else {
      sb.append(this.Receiver);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("LP:");
    sb.append(this.LP);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
    if (Sender != null) {
      Sender.validate();
    }
    if (Receiver != null) {
      Receiver.validate();
    }
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TransferIDStandardSchemeFactory implements SchemeFactory {
    public TransferIDStandardScheme getScheme() {
      return new TransferIDStandardScheme();
    }
  }

  private static class TransferIDStandardScheme extends StandardScheme<TransferID> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TransferID struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // SENDER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Sender = new NodeID();
              struct.Sender.read(iprot);
              struct.setSenderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RECEIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.Receiver = new NodeID();
              struct.Receiver.read(iprot);
              struct.setReceiverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LP
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.LP = iprot.readI64();
              struct.setLPIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TransferID struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.Sender != null) {
        oprot.writeFieldBegin(SENDER_FIELD_DESC);
        struct.Sender.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.Receiver != null) {
        oprot.writeFieldBegin(RECEIVER_FIELD_DESC);
        struct.Receiver.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(LP_FIELD_DESC);
      oprot.writeI64(struct.LP);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TransferIDTupleSchemeFactory implements SchemeFactory {
    public TransferIDTupleScheme getScheme() {
      return new TransferIDTupleScheme();
    }
  }

  private static class TransferIDTupleScheme extends TupleScheme<TransferID> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TransferID struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetSender()) {
        optionals.set(0);
      }
      if (struct.isSetReceiver()) {
        optionals.set(1);
      }
      if (struct.isSetLP()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetSender()) {
        struct.Sender.write(oprot);
      }
      if (struct.isSetReceiver()) {
        struct.Receiver.write(oprot);
      }
      if (struct.isSetLP()) {
        oprot.writeI64(struct.LP);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TransferID struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.Sender = new NodeID();
        struct.Sender.read(iprot);
        struct.setSenderIsSet(true);
      }
      if (incoming.get(1)) {
        struct.Receiver = new NodeID();
        struct.Receiver.read(iprot);
        struct.setReceiverIsSet(true);
      }
      if (incoming.get(2)) {
        struct.LP = iprot.readI64();
        struct.setLPIsSet(true);
      }
    }
  }

}

