/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace SRBanking.ThriftInterface
{
  public partial class NodeService {
    public interface Iface {
      /// <summary>
      /// 
      /// </summary>
      /// <param name="receiver"></param>
      /// <param name="value"></param>
      void makeTransfer(NodeID receiver, long value);
      #if SILVERLIGHT
      IAsyncResult Begin_makeTransfer(AsyncCallback callback, object state, NodeID receiver, long value);
      void End_makeTransfer(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// </summary>
      long getAccountBalance();
      #if SILVERLIGHT
      IAsyncResult Begin_getAccountBalance(AsyncCallback callback, object state);
      long End_getAccountBalance(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// pings node
      /// </summary>
      void ping();
      #if SILVERLIGHT
      IAsyncResult Begin_ping(AsyncCallback callback, object state);
      void End_ping(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// pings Swarm and checks if leader is a leader
      /// </summary>
      /// <param name="leader"></param>
      /// <param name="transfer"></param>
      void pingSwarm(NodeID leader, TransferID transfer);
      #if SILVERLIGHT
      IAsyncResult Begin_pingSwarm(AsyncCallback callback, object state, NodeID leader, TransferID transfer);
      void End_pingSwarm(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarm"></param>
      void updateSwarmMembers(Swarm swarm);
      #if SILVERLIGHT
      IAsyncResult Begin_updateSwarmMembers(AsyncCallback callback, object state, Swarm swarm);
      void End_updateSwarmMembers(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarm"></param>
      /// <param name="transferData"></param>
      void addToSwarm(Swarm swarm, TransferData transferData);
      #if SILVERLIGHT
      IAsyncResult Begin_addToSwarm(AsyncCallback callback, object state, Swarm swarm, TransferData transferData);
      void End_addToSwarm(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarmID"></param>
      void delSwarm(TransferID swarmID);
      #if SILVERLIGHT
      IAsyncResult Begin_delSwarm(AsyncCallback callback, object state, TransferID swarmID);
      void End_delSwarm(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// </summary>
      /// <param name="transfer"></param>
      Swarm getSwarm(TransferID transfer);
      #if SILVERLIGHT
      IAsyncResult Begin_getSwarm(AsyncCallback callback, object state, TransferID transfer);
      Swarm End_getSwarm(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// returns true if candidateNodeID> current
      /// </summary>
      /// <param name="cadidate"></param>
      /// <param name="Transfer"></param>
      bool electSwarmLeader(NodeID cadidate, TransferID Transfer);
      #if SILVERLIGHT
      IAsyncResult Begin_electSwarmLeader(AsyncCallback callback, object state, NodeID cadidate, TransferID Transfer);
      bool End_electSwarmLeader(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// new leader broadcast that he is a leader
      /// </summary>
      /// <param name="swarm"></param>
      void electionEndedSwarm(Swarm swarm);
      #if SILVERLIGHT
      IAsyncResult Begin_electionEndedSwarm(AsyncCallback callback, object state, Swarm swarm);
      void End_electionEndedSwarm(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// </summary>
      /// <param name="transfer"></param>
      void deliverTransfer(TransferData transfer);
      #if SILVERLIGHT
      IAsyncResult Begin_deliverTransfer(AsyncCallback callback, object state, TransferData transfer);
      void End_deliverTransfer(IAsyncResult asyncResult);
      #endif
      List<Swarm> getSwarmList();
      #if SILVERLIGHT
      IAsyncResult Begin_getSwarmList(AsyncCallback callback, object state);
      List<Swarm> End_getSwarmList(IAsyncResult asyncResult);
      #endif
      void startSwarmElection(TransferID transfer);
      #if SILVERLIGHT
      IAsyncResult Begin_startSwarmElection(AsyncCallback callback, object state, TransferID transfer);
      void End_startSwarmElection(IAsyncResult asyncResult);
      #endif
      List<TransferData> getTransfers();
      #if SILVERLIGHT
      IAsyncResult Begin_getTransfers(AsyncCallback callback, object state);
      List<TransferData> End_getTransfers(IAsyncResult asyncResult);
      #endif
      void stop();
      #if SILVERLIGHT
      IAsyncResult Begin_stop(AsyncCallback callback, object state);
      void End_stop(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_makeTransfer(AsyncCallback callback, object state, NodeID receiver, long value)
      {
        return send_makeTransfer(callback, state, receiver, value);
      }

      public void End_makeTransfer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_makeTransfer();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      /// <param name="receiver"></param>
      /// <param name="value"></param>
      public void makeTransfer(NodeID receiver, long value)
      {
        #if !SILVERLIGHT
        send_makeTransfer(receiver, value);
        recv_makeTransfer();

        #else
        var asyncResult = Begin_makeTransfer(null, null, receiver, value);
        End_makeTransfer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_makeTransfer(AsyncCallback callback, object state, NodeID receiver, long value)
      #else
      public void send_makeTransfer(NodeID receiver, long value)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("makeTransfer", TMessageType.Call, seqid_));
        makeTransfer_args args = new makeTransfer_args();
        args.Receiver = receiver;
        args.Value = value;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_makeTransfer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        makeTransfer_result result = new makeTransfer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        if (result.__isset.exc2) {
          throw result.Exc2;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getAccountBalance(AsyncCallback callback, object state)
      {
        return send_getAccountBalance(callback, state);
      }

      public long End_getAccountBalance(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getAccountBalance();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      public long getAccountBalance()
      {
        #if !SILVERLIGHT
        send_getAccountBalance();
        return recv_getAccountBalance();

        #else
        var asyncResult = Begin_getAccountBalance(null, null);
        return End_getAccountBalance(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getAccountBalance(AsyncCallback callback, object state)
      #else
      public void send_getAccountBalance()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getAccountBalance", TMessageType.Call, seqid_));
        getAccountBalance_args args = new getAccountBalance_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public long recv_getAccountBalance()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getAccountBalance_result result = new getAccountBalance_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAccountBalance failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ping(AsyncCallback callback, object state)
      {
        return send_ping(callback, state);
      }

      public void End_ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ping();
      }

      #endif

      /// <summary>
      /// pings node
      /// </summary>
      public void ping()
      {
        #if !SILVERLIGHT
        send_ping();
        recv_ping();

        #else
        var asyncResult = Begin_ping(null, null);
        End_ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ping(AsyncCallback callback, object state)
      #else
      public void send_ping()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ping", TMessageType.Call, seqid_));
        ping_args args = new ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ping_result result = new ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_pingSwarm(AsyncCallback callback, object state, NodeID leader, TransferID transfer)
      {
        return send_pingSwarm(callback, state, leader, transfer);
      }

      public void End_pingSwarm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_pingSwarm();
      }

      #endif

      /// <summary>
      /// pings Swarm and checks if leader is a leader
      /// </summary>
      /// <param name="leader"></param>
      /// <param name="transfer"></param>
      public void pingSwarm(NodeID leader, TransferID transfer)
      {
        #if !SILVERLIGHT
        send_pingSwarm(leader, transfer);
        recv_pingSwarm();

        #else
        var asyncResult = Begin_pingSwarm(null, null, leader, transfer);
        End_pingSwarm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_pingSwarm(AsyncCallback callback, object state, NodeID leader, TransferID transfer)
      #else
      public void send_pingSwarm(NodeID leader, TransferID transfer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("pingSwarm", TMessageType.Call, seqid_));
        pingSwarm_args args = new pingSwarm_args();
        args.Leader = leader;
        args.Transfer = transfer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_pingSwarm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        pingSwarm_result result = new pingSwarm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_updateSwarmMembers(AsyncCallback callback, object state, Swarm swarm)
      {
        return send_updateSwarmMembers(callback, state, swarm);
      }

      public void End_updateSwarmMembers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_updateSwarmMembers();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarm"></param>
      public void updateSwarmMembers(Swarm swarm)
      {
        #if !SILVERLIGHT
        send_updateSwarmMembers(swarm);
        recv_updateSwarmMembers();

        #else
        var asyncResult = Begin_updateSwarmMembers(null, null, swarm);
        End_updateSwarmMembers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_updateSwarmMembers(AsyncCallback callback, object state, Swarm swarm)
      #else
      public void send_updateSwarmMembers(Swarm swarm)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("updateSwarmMembers", TMessageType.Call, seqid_));
        updateSwarmMembers_args args = new updateSwarmMembers_args();
        args.Swarm = swarm;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_updateSwarmMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        updateSwarmMembers_result result = new updateSwarmMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        if (result.__isset.exc2) {
          throw result.Exc2;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_addToSwarm(AsyncCallback callback, object state, Swarm swarm, TransferData transferData)
      {
        return send_addToSwarm(callback, state, swarm, transferData);
      }

      public void End_addToSwarm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_addToSwarm();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarm"></param>
      /// <param name="transferData"></param>
      public void addToSwarm(Swarm swarm, TransferData transferData)
      {
        #if !SILVERLIGHT
        send_addToSwarm(swarm, transferData);
        recv_addToSwarm();

        #else
        var asyncResult = Begin_addToSwarm(null, null, swarm, transferData);
        End_addToSwarm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_addToSwarm(AsyncCallback callback, object state, Swarm swarm, TransferData transferData)
      #else
      public void send_addToSwarm(Swarm swarm, TransferData transferData)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("addToSwarm", TMessageType.Call, seqid_));
        addToSwarm_args args = new addToSwarm_args();
        args.Swarm = swarm;
        args.TransferData = transferData;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_addToSwarm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        addToSwarm_result result = new addToSwarm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_delSwarm(AsyncCallback callback, object state, TransferID swarmID)
      {
        return send_delSwarm(callback, state, swarmID);
      }

      public void End_delSwarm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_delSwarm();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarmID"></param>
      public void delSwarm(TransferID swarmID)
      {
        #if !SILVERLIGHT
        send_delSwarm(swarmID);
        recv_delSwarm();

        #else
        var asyncResult = Begin_delSwarm(null, null, swarmID);
        End_delSwarm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_delSwarm(AsyncCallback callback, object state, TransferID swarmID)
      #else
      public void send_delSwarm(TransferID swarmID)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("delSwarm", TMessageType.Call, seqid_));
        delSwarm_args args = new delSwarm_args();
        args.SwarmID = swarmID;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_delSwarm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        delSwarm_result result = new delSwarm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        if (result.__isset.exc2) {
          throw result.Exc2;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSwarm(AsyncCallback callback, object state, TransferID transfer)
      {
        return send_getSwarm(callback, state, transfer);
      }

      public Swarm End_getSwarm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSwarm();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      /// <param name="transfer"></param>
      public Swarm getSwarm(TransferID transfer)
      {
        #if !SILVERLIGHT
        send_getSwarm(transfer);
        return recv_getSwarm();

        #else
        var asyncResult = Begin_getSwarm(null, null, transfer);
        return End_getSwarm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSwarm(AsyncCallback callback, object state, TransferID transfer)
      #else
      public void send_getSwarm(TransferID transfer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSwarm", TMessageType.Call, seqid_));
        getSwarm_args args = new getSwarm_args();
        args.Transfer = transfer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Swarm recv_getSwarm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSwarm_result result = new getSwarm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.exc) {
          throw result.Exc;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSwarm failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_electSwarmLeader(AsyncCallback callback, object state, NodeID cadidate, TransferID Transfer)
      {
        return send_electSwarmLeader(callback, state, cadidate, Transfer);
      }

      public bool End_electSwarmLeader(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_electSwarmLeader();
      }

      #endif

      /// <summary>
      /// returns true if candidateNodeID> current
      /// </summary>
      /// <param name="cadidate"></param>
      /// <param name="Transfer"></param>
      public bool electSwarmLeader(NodeID cadidate, TransferID Transfer)
      {
        #if !SILVERLIGHT
        send_electSwarmLeader(cadidate, Transfer);
        return recv_electSwarmLeader();

        #else
        var asyncResult = Begin_electSwarmLeader(null, null, cadidate, Transfer);
        return End_electSwarmLeader(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_electSwarmLeader(AsyncCallback callback, object state, NodeID cadidate, TransferID Transfer)
      #else
      public void send_electSwarmLeader(NodeID cadidate, TransferID Transfer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("electSwarmLeader", TMessageType.Call, seqid_));
        electSwarmLeader_args args = new electSwarmLeader_args();
        args.Cadidate = cadidate;
        args.Transfer = Transfer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_electSwarmLeader()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        electSwarmLeader_result result = new electSwarmLeader_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.exc) {
          throw result.Exc;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "electSwarmLeader failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_electionEndedSwarm(AsyncCallback callback, object state, Swarm swarm)
      {
        return send_electionEndedSwarm(callback, state, swarm);
      }

      public void End_electionEndedSwarm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_electionEndedSwarm();
      }

      #endif

      /// <summary>
      /// new leader broadcast that he is a leader
      /// </summary>
      /// <param name="swarm"></param>
      public void electionEndedSwarm(Swarm swarm)
      {
        #if !SILVERLIGHT
        send_electionEndedSwarm(swarm);
        recv_electionEndedSwarm();

        #else
        var asyncResult = Begin_electionEndedSwarm(null, null, swarm);
        End_electionEndedSwarm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_electionEndedSwarm(AsyncCallback callback, object state, Swarm swarm)
      #else
      public void send_electionEndedSwarm(Swarm swarm)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("electionEndedSwarm", TMessageType.Call, seqid_));
        electionEndedSwarm_args args = new electionEndedSwarm_args();
        args.Swarm = swarm;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_electionEndedSwarm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        electionEndedSwarm_result result = new electionEndedSwarm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_deliverTransfer(AsyncCallback callback, object state, TransferData transfer)
      {
        return send_deliverTransfer(callback, state, transfer);
      }

      public void End_deliverTransfer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_deliverTransfer();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      /// <param name="transfer"></param>
      public void deliverTransfer(TransferData transfer)
      {
        #if !SILVERLIGHT
        send_deliverTransfer(transfer);
        recv_deliverTransfer();

        #else
        var asyncResult = Begin_deliverTransfer(null, null, transfer);
        End_deliverTransfer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_deliverTransfer(AsyncCallback callback, object state, TransferData transfer)
      #else
      public void send_deliverTransfer(TransferData transfer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("deliverTransfer", TMessageType.Call, seqid_));
        deliverTransfer_args args = new deliverTransfer_args();
        args.Transfer = transfer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_deliverTransfer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        deliverTransfer_result result = new deliverTransfer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getSwarmList(AsyncCallback callback, object state)
      {
        return send_getSwarmList(callback, state);
      }

      public List<Swarm> End_getSwarmList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getSwarmList();
      }

      #endif

      public List<Swarm> getSwarmList()
      {
        #if !SILVERLIGHT
        send_getSwarmList();
        return recv_getSwarmList();

        #else
        var asyncResult = Begin_getSwarmList(null, null);
        return End_getSwarmList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getSwarmList(AsyncCallback callback, object state)
      #else
      public void send_getSwarmList()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getSwarmList", TMessageType.Call, seqid_));
        getSwarmList_args args = new getSwarmList_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Swarm> recv_getSwarmList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getSwarmList_result result = new getSwarmList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSwarmList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_startSwarmElection(AsyncCallback callback, object state, TransferID transfer)
      {
        return send_startSwarmElection(callback, state, transfer);
      }

      public void End_startSwarmElection(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_startSwarmElection();
      }

      #endif

      public void startSwarmElection(TransferID transfer)
      {
        #if !SILVERLIGHT
        send_startSwarmElection(transfer);
        recv_startSwarmElection();

        #else
        var asyncResult = Begin_startSwarmElection(null, null, transfer);
        End_startSwarmElection(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_startSwarmElection(AsyncCallback callback, object state, TransferID transfer)
      #else
      public void send_startSwarmElection(TransferID transfer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("startSwarmElection", TMessageType.Call, seqid_));
        startSwarmElection_args args = new startSwarmElection_args();
        args.Transfer = transfer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_startSwarmElection()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        startSwarmElection_result result = new startSwarmElection_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_getTransfers(AsyncCallback callback, object state)
      {
        return send_getTransfers(callback, state);
      }

      public List<TransferData> End_getTransfers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_getTransfers();
      }

      #endif

      public List<TransferData> getTransfers()
      {
        #if !SILVERLIGHT
        send_getTransfers();
        return recv_getTransfers();

        #else
        var asyncResult = Begin_getTransfers(null, null);
        return End_getTransfers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_getTransfers(AsyncCallback callback, object state)
      #else
      public void send_getTransfers()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("getTransfers", TMessageType.Call, seqid_));
        getTransfers_args args = new getTransfers_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TransferData> recv_getTransfers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        getTransfers_result result = new getTransfers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTransfers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_stop(AsyncCallback callback, object state)
      {
        return send_stop(callback, state);
      }

      public void End_stop(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_stop();
      }

      #endif

      public void stop()
      {
        #if !SILVERLIGHT
        send_stop();
        recv_stop();

        #else
        var asyncResult = Begin_stop(null, null);
        End_stop(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_stop(AsyncCallback callback, object state)
      #else
      public void send_stop()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("stop", TMessageType.Call, seqid_));
        stop_args args = new stop_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_stop()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        stop_result result = new stop_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["makeTransfer"] = makeTransfer_Process;
        processMap_["getAccountBalance"] = getAccountBalance_Process;
        processMap_["ping"] = ping_Process;
        processMap_["pingSwarm"] = pingSwarm_Process;
        processMap_["updateSwarmMembers"] = updateSwarmMembers_Process;
        processMap_["addToSwarm"] = addToSwarm_Process;
        processMap_["delSwarm"] = delSwarm_Process;
        processMap_["getSwarm"] = getSwarm_Process;
        processMap_["electSwarmLeader"] = electSwarmLeader_Process;
        processMap_["electionEndedSwarm"] = electionEndedSwarm_Process;
        processMap_["deliverTransfer"] = deliverTransfer_Process;
        processMap_["getSwarmList"] = getSwarmList_Process;
        processMap_["startSwarmElection"] = startSwarmElection_Process;
        processMap_["getTransfers"] = getTransfers_Process;
        processMap_["stop"] = stop_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void makeTransfer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        makeTransfer_args args = new makeTransfer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        makeTransfer_result result = new makeTransfer_result();
        try {
          iface_.makeTransfer(args.Receiver, args.Value);
        } catch (NotEnoughMembersToMakeTransfer exc) {
          result.Exc = exc;
        } catch (NotEnoughMoney exc2) {
          result.Exc2 = exc2;
        }
        oprot.WriteMessageBegin(new TMessage("makeTransfer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getAccountBalance_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getAccountBalance_args args = new getAccountBalance_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getAccountBalance_result result = new getAccountBalance_result();
        result.Success = iface_.getAccountBalance();
        oprot.WriteMessageBegin(new TMessage("getAccountBalance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ping_args args = new ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ping_result result = new ping_result();
        iface_.ping();
        oprot.WriteMessageBegin(new TMessage("ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void pingSwarm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        pingSwarm_args args = new pingSwarm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        pingSwarm_result result = new pingSwarm_result();
        try {
          iface_.pingSwarm(args.Leader, args.Transfer);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("pingSwarm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void updateSwarmMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        updateSwarmMembers_args args = new updateSwarmMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        updateSwarmMembers_result result = new updateSwarmMembers_result();
        try {
          iface_.updateSwarmMembers(args.Swarm);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        } catch (WrongSwarmLeader exc2) {
          result.Exc2 = exc2;
        }
        oprot.WriteMessageBegin(new TMessage("updateSwarmMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void addToSwarm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        addToSwarm_args args = new addToSwarm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        addToSwarm_result result = new addToSwarm_result();
        try {
          iface_.addToSwarm(args.Swarm, args.TransferData);
        } catch (AlreadySwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("addToSwarm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void delSwarm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        delSwarm_args args = new delSwarm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        delSwarm_result result = new delSwarm_result();
        try {
          iface_.delSwarm(args.SwarmID);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        } catch (WrongSwarmLeader exc2) {
          result.Exc2 = exc2;
        }
        oprot.WriteMessageBegin(new TMessage("delSwarm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSwarm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSwarm_args args = new getSwarm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSwarm_result result = new getSwarm_result();
        try {
          result.Success = iface_.getSwarm(args.Transfer);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("getSwarm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void electSwarmLeader_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        electSwarmLeader_args args = new electSwarmLeader_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        electSwarmLeader_result result = new electSwarmLeader_result();
        try {
          result.Success = iface_.electSwarmLeader(args.Cadidate, args.Transfer);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("electSwarmLeader", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void electionEndedSwarm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        electionEndedSwarm_args args = new electionEndedSwarm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        electionEndedSwarm_result result = new electionEndedSwarm_result();
        try {
          iface_.electionEndedSwarm(args.Swarm);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("electionEndedSwarm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void deliverTransfer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        deliverTransfer_args args = new deliverTransfer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        deliverTransfer_result result = new deliverTransfer_result();
        iface_.deliverTransfer(args.Transfer);
        oprot.WriteMessageBegin(new TMessage("deliverTransfer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getSwarmList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getSwarmList_args args = new getSwarmList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getSwarmList_result result = new getSwarmList_result();
        result.Success = iface_.getSwarmList();
        oprot.WriteMessageBegin(new TMessage("getSwarmList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void startSwarmElection_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        startSwarmElection_args args = new startSwarmElection_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        startSwarmElection_result result = new startSwarmElection_result();
        try {
          iface_.startSwarmElection(args.Transfer);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("startSwarmElection", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void getTransfers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        getTransfers_args args = new getTransfers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        getTransfers_result result = new getTransfers_result();
        result.Success = iface_.getTransfers();
        oprot.WriteMessageBegin(new TMessage("getTransfers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void stop_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        stop_args args = new stop_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        stop_result result = new stop_result();
        iface_.stop();
        oprot.WriteMessageBegin(new TMessage("stop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makeTransfer_args : TBase
    {
      private NodeID _receiver;
      private long _value;

      public NodeID Receiver
      {
        get
        {
          return _receiver;
        }
        set
        {
          __isset.receiver = true;
          this._receiver = value;
        }
      }

      public long Value
      {
        get
        {
          return _value;
        }
        set
        {
          __isset.value = true;
          this._value = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool receiver;
        public bool value;
      }

      public makeTransfer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Receiver = new NodeID();
                Receiver.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I64) {
                Value = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("makeTransfer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Receiver != null && __isset.receiver) {
          field.Name = "receiver";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Receiver.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (__isset.value) {
          field.Name = "value";
          field.Type = TType.I64;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Value);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("makeTransfer_args(");
        sb.Append("Receiver: ");
        sb.Append(Receiver== null ? "<null>" : Receiver.ToString());
        sb.Append(",Value: ");
        sb.Append(Value);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class makeTransfer_result : TBase
    {
      private NotEnoughMembersToMakeTransfer _exc;
      private NotEnoughMoney _exc2;

      public NotEnoughMembersToMakeTransfer Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }

      public NotEnoughMoney Exc2
      {
        get
        {
          return _exc2;
        }
        set
        {
          __isset.exc2 = true;
          this._exc2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
        public bool exc2;
      }

      public makeTransfer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotEnoughMembersToMakeTransfer();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Exc2 = new NotEnoughMoney();
                Exc2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("makeTransfer_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.exc2) {
          if (Exc2 != null) {
            field.Name = "Exc2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Exc2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("makeTransfer_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(",Exc2: ");
        sb.Append(Exc2== null ? "<null>" : Exc2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAccountBalance_args : TBase
    {

      public getAccountBalance_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAccountBalance_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAccountBalance_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getAccountBalance_result : TBase
    {
      private long _success;

      public long Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getAccountBalance_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I64) {
                Success = iprot.ReadI64();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getAccountBalance_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I64;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI64(Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getAccountBalance_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_args : TBase
    {

      public ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ping_result : TBase
    {

      public ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ping_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ping_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class pingSwarm_args : TBase
    {
      private NodeID _leader;
      private TransferID _transfer;

      public NodeID Leader
      {
        get
        {
          return _leader;
        }
        set
        {
          __isset.leader = true;
          this._leader = value;
        }
      }

      public TransferID Transfer
      {
        get
        {
          return _transfer;
        }
        set
        {
          __isset.transfer = true;
          this._transfer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leader;
        public bool transfer;
      }

      public pingSwarm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Leader = new NodeID();
                Leader.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Transfer = new TransferID();
                Transfer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("pingSwarm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Leader != null && __isset.leader) {
          field.Name = "leader";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Leader.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Transfer != null && __isset.transfer) {
          field.Name = "transfer";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Transfer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("pingSwarm_args(");
        sb.Append("Leader: ");
        sb.Append(Leader== null ? "<null>" : Leader.ToString());
        sb.Append(",Transfer: ");
        sb.Append(Transfer== null ? "<null>" : Transfer.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class pingSwarm_result : TBase
    {
      private NotSwarmMemeber _exc;

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
      }

      public pingSwarm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("pingSwarm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("pingSwarm_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSwarmMembers_args : TBase
    {
      private Swarm _swarm;

      public Swarm Swarm
      {
        get
        {
          return _swarm;
        }
        set
        {
          __isset.swarm = true;
          this._swarm = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool swarm;
      }

      public updateSwarmMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Swarm = new Swarm();
                Swarm.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSwarmMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Swarm != null && __isset.swarm) {
          field.Name = "swarm";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Swarm.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSwarmMembers_args(");
        sb.Append("Swarm: ");
        sb.Append(Swarm== null ? "<null>" : Swarm.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class updateSwarmMembers_result : TBase
    {
      private NotSwarmMemeber _exc;
      private WrongSwarmLeader _exc2;

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }

      public WrongSwarmLeader Exc2
      {
        get
        {
          return _exc2;
        }
        set
        {
          __isset.exc2 = true;
          this._exc2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
        public bool exc2;
      }

      public updateSwarmMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Exc2 = new WrongSwarmLeader();
                Exc2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("updateSwarmMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.exc2) {
          if (Exc2 != null) {
            field.Name = "Exc2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Exc2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("updateSwarmMembers_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(",Exc2: ");
        sb.Append(Exc2== null ? "<null>" : Exc2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addToSwarm_args : TBase
    {
      private Swarm _swarm;
      private TransferData _transferData;

      public Swarm Swarm
      {
        get
        {
          return _swarm;
        }
        set
        {
          __isset.swarm = true;
          this._swarm = value;
        }
      }

      public TransferData TransferData
      {
        get
        {
          return _transferData;
        }
        set
        {
          __isset.transferData = true;
          this._transferData = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool swarm;
        public bool transferData;
      }

      public addToSwarm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Swarm = new Swarm();
                Swarm.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                TransferData = new TransferData();
                TransferData.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addToSwarm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Swarm != null && __isset.swarm) {
          field.Name = "swarm";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Swarm.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (TransferData != null && __isset.transferData) {
          field.Name = "transferData";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          TransferData.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addToSwarm_args(");
        sb.Append("Swarm: ");
        sb.Append(Swarm== null ? "<null>" : Swarm.ToString());
        sb.Append(",TransferData: ");
        sb.Append(TransferData== null ? "<null>" : TransferData.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class addToSwarm_result : TBase
    {
      private AlreadySwarmMemeber _exc;

      public AlreadySwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
      }

      public addToSwarm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new AlreadySwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("addToSwarm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("addToSwarm_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class delSwarm_args : TBase
    {
      private TransferID _swarmID;

      public TransferID SwarmID
      {
        get
        {
          return _swarmID;
        }
        set
        {
          __isset.swarmID = true;
          this._swarmID = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool swarmID;
      }

      public delSwarm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                SwarmID = new TransferID();
                SwarmID.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("delSwarm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (SwarmID != null && __isset.swarmID) {
          field.Name = "swarmID";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          SwarmID.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("delSwarm_args(");
        sb.Append("SwarmID: ");
        sb.Append(SwarmID== null ? "<null>" : SwarmID.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class delSwarm_result : TBase
    {
      private NotSwarmMemeber _exc;
      private WrongSwarmLeader _exc2;

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }

      public WrongSwarmLeader Exc2
      {
        get
        {
          return _exc2;
        }
        set
        {
          __isset.exc2 = true;
          this._exc2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
        public bool exc2;
      }

      public delSwarm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Exc2 = new WrongSwarmLeader();
                Exc2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("delSwarm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.exc2) {
          if (Exc2 != null) {
            field.Name = "Exc2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Exc2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("delSwarm_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(",Exc2: ");
        sb.Append(Exc2== null ? "<null>" : Exc2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSwarm_args : TBase
    {
      private TransferID _transfer;

      public TransferID Transfer
      {
        get
        {
          return _transfer;
        }
        set
        {
          __isset.transfer = true;
          this._transfer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transfer;
      }

      public getSwarm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Transfer = new TransferID();
                Transfer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSwarm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Transfer != null && __isset.transfer) {
          field.Name = "transfer";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Transfer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSwarm_args(");
        sb.Append("Transfer: ");
        sb.Append(Transfer== null ? "<null>" : Transfer.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSwarm_result : TBase
    {
      private Swarm _success;
      private NotSwarmMemeber _exc;

      public Swarm Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool exc;
      }

      public getSwarm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Swarm();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSwarm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSwarm_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class electSwarmLeader_args : TBase
    {
      private NodeID _cadidate;
      private TransferID _Transfer;

      public NodeID Cadidate
      {
        get
        {
          return _cadidate;
        }
        set
        {
          __isset.cadidate = true;
          this._cadidate = value;
        }
      }

      public TransferID Transfer
      {
        get
        {
          return _Transfer;
        }
        set
        {
          __isset.Transfer = true;
          this._Transfer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cadidate;
        public bool Transfer;
      }

      public electSwarmLeader_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cadidate = new NodeID();
                Cadidate.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Transfer = new TransferID();
                Transfer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("electSwarmLeader_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cadidate != null && __isset.cadidate) {
          field.Name = "cadidate";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cadidate.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Transfer != null && __isset.Transfer) {
          field.Name = "Transfer";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Transfer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("electSwarmLeader_args(");
        sb.Append("Cadidate: ");
        sb.Append(Cadidate== null ? "<null>" : Cadidate.ToString());
        sb.Append(",Transfer: ");
        sb.Append(Transfer== null ? "<null>" : Transfer.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class electSwarmLeader_result : TBase
    {
      private bool _success;
      private NotSwarmMemeber _exc;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool exc;
      }

      public electSwarmLeader_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("electSwarmLeader_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("electSwarmLeader_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class electionEndedSwarm_args : TBase
    {
      private Swarm _swarm;

      public Swarm Swarm
      {
        get
        {
          return _swarm;
        }
        set
        {
          __isset.swarm = true;
          this._swarm = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool swarm;
      }

      public electionEndedSwarm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Swarm = new Swarm();
                Swarm.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("electionEndedSwarm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Swarm != null && __isset.swarm) {
          field.Name = "swarm";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Swarm.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("electionEndedSwarm_args(");
        sb.Append("Swarm: ");
        sb.Append(Swarm== null ? "<null>" : Swarm.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class electionEndedSwarm_result : TBase
    {
      private NotSwarmMemeber _exc;

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
      }

      public electionEndedSwarm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("electionEndedSwarm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("electionEndedSwarm_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deliverTransfer_args : TBase
    {
      private TransferData _transfer;

      public TransferData Transfer
      {
        get
        {
          return _transfer;
        }
        set
        {
          __isset.transfer = true;
          this._transfer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transfer;
      }

      public deliverTransfer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Transfer = new TransferData();
                Transfer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deliverTransfer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Transfer != null && __isset.transfer) {
          field.Name = "transfer";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Transfer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deliverTransfer_args(");
        sb.Append("Transfer: ");
        sb.Append(Transfer== null ? "<null>" : Transfer.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class deliverTransfer_result : TBase
    {

      public deliverTransfer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("deliverTransfer_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("deliverTransfer_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSwarmList_args : TBase
    {

      public getSwarmList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSwarmList_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSwarmList_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getSwarmList_result : TBase
    {
      private List<Swarm> _success;

      public List<Swarm> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getSwarmList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Swarm>();
                  TList _list4 = iprot.ReadListBegin();
                  for( int _i5 = 0; _i5 < _list4.Count; ++_i5)
                  {
                    Swarm _elem6 = new Swarm();
                    _elem6 = new Swarm();
                    _elem6.Read(iprot);
                    Success.Add(_elem6);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getSwarmList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Swarm _iter7 in Success)
              {
                _iter7.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getSwarmList_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class startSwarmElection_args : TBase
    {
      private TransferID _transfer;

      public TransferID Transfer
      {
        get
        {
          return _transfer;
        }
        set
        {
          __isset.transfer = true;
          this._transfer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transfer;
      }

      public startSwarmElection_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Transfer = new TransferID();
                Transfer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("startSwarmElection_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Transfer != null && __isset.transfer) {
          field.Name = "transfer";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Transfer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("startSwarmElection_args(");
        sb.Append("Transfer: ");
        sb.Append(Transfer== null ? "<null>" : Transfer.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class startSwarmElection_result : TBase
    {
      private NotSwarmMemeber _exc;

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
      }

      public startSwarmElection_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("startSwarmElection_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("startSwarmElection_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTransfers_args : TBase
    {

      public getTransfers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTransfers_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTransfers_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class getTransfers_result : TBase
    {
      private List<TransferData> _success;

      public List<TransferData> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public getTransfers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TransferData>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    TransferData _elem10 = new TransferData();
                    _elem10 = new TransferData();
                    _elem10.Read(iprot);
                    Success.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("getTransfers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TransferData _iter11 in Success)
              {
                _iter11.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("getTransfers_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class stop_args : TBase
    {

      public stop_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("stop_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("stop_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class stop_result : TBase
    {

      public stop_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("stop_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("stop_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
