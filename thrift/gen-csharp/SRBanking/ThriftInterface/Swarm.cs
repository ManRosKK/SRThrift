/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace SRBanking.ThriftInterface
{

  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class Swarm : TBase
  {
    private TransferID _transfer;
    private NodeID _leader;
    private List<NodeID> _members;

    public TransferID Transfer
    {
      get
      {
        return _transfer;
      }
      set
      {
        __isset.transfer = true;
        this._transfer = value;
      }
    }

    public NodeID Leader
    {
      get
      {
        return _leader;
      }
      set
      {
        __isset.leader = true;
        this._leader = value;
      }
    }

    public List<NodeID> Members
    {
      get
      {
        return _members;
      }
      set
      {
        __isset.members = true;
        this._members = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool transfer;
      public bool leader;
      public bool members;
    }

    public Swarm() {
    }

    public void Read (TProtocol iprot)
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.Struct) {
              Transfer = new TransferID();
              Transfer.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Leader = new NodeID();
              Leader.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.List) {
              {
                Members = new List<NodeID>();
                TList _list0 = iprot.ReadListBegin();
                for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                {
                  NodeID _elem2 = new NodeID();
                  _elem2 = new NodeID();
                  _elem2.Read(iprot);
                  Members.Add(_elem2);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }

    public void Write(TProtocol oprot) {
      TStruct struc = new TStruct("Swarm");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Transfer != null && __isset.transfer) {
        field.Name = "transfer";
        field.Type = TType.Struct;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        Transfer.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Leader != null && __isset.leader) {
        field.Name = "leader";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Leader.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (Members != null && __isset.members) {
        field.Name = "members";
        field.Type = TType.List;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, Members.Count));
          foreach (NodeID _iter3 in Members)
          {
            _iter3.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }

    public override string ToString() {
      StringBuilder sb = new StringBuilder("Swarm(");
      sb.Append("Transfer: ");
      sb.Append(Transfer== null ? "<null>" : Transfer.ToString());
      sb.Append(",Leader: ");
      sb.Append(Leader== null ? "<null>" : Leader.ToString());
      sb.Append(",Members: ");
      sb.Append(Members);
      sb.Append(")");
      return sb.ToString();
    }

  }

}
