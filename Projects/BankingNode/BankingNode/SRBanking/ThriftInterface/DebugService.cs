/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace SRBanking.ThriftInterface
{
  public partial class DebugService {
    public interface Iface {
      List<Swarm> GetSwarmList();
      #if SILVERLIGHT
      IAsyncResult Begin_GetSwarmList(AsyncCallback callback, object state);
      List<Swarm> End_GetSwarmList(IAsyncResult asyncResult);
      #endif
      void startSwarmElection(TransferID transfer);
      #if SILVERLIGHT
      IAsyncResult Begin_startSwarmElection(AsyncCallback callback, object state, TransferID transfer);
      void End_startSwarmElection(IAsyncResult asyncResult);
      #endif
      List<TransferData> GetTransfers();
      #if SILVERLIGHT
      IAsyncResult Begin_GetTransfers(AsyncCallback callback, object state);
      List<TransferData> End_GetTransfers(IAsyncResult asyncResult);
      #endif
      void stop();
      #if SILVERLIGHT
      IAsyncResult Begin_stop(AsyncCallback callback, object state);
      void End_stop(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSwarmList(AsyncCallback callback, object state)
      {
        return send_GetSwarmList(callback, state);
      }

      public List<Swarm> End_GetSwarmList(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSwarmList();
      }

      #endif

      public List<Swarm> GetSwarmList()
      {
        #if !SILVERLIGHT
        send_GetSwarmList();
        return recv_GetSwarmList();

        #else
        var asyncResult = Begin_GetSwarmList(null, null);
        return End_GetSwarmList(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSwarmList(AsyncCallback callback, object state)
      #else
      public void send_GetSwarmList()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSwarmList", TMessageType.Call, seqid_));
        GetSwarmList_args args = new GetSwarmList_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<Swarm> recv_GetSwarmList()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSwarmList_result result = new GetSwarmList_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSwarmList failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_startSwarmElection(AsyncCallback callback, object state, TransferID transfer)
      {
        return send_startSwarmElection(callback, state, transfer);
      }

      public void End_startSwarmElection(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_startSwarmElection();
      }

      #endif

      public void startSwarmElection(TransferID transfer)
      {
        #if !SILVERLIGHT
        send_startSwarmElection(transfer);
        recv_startSwarmElection();

        #else
        var asyncResult = Begin_startSwarmElection(null, null, transfer);
        End_startSwarmElection(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_startSwarmElection(AsyncCallback callback, object state, TransferID transfer)
      #else
      public void send_startSwarmElection(TransferID transfer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("startSwarmElection", TMessageType.Call, seqid_));
        startSwarmElection_args args = new startSwarmElection_args();
        args.Transfer = transfer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_startSwarmElection()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        startSwarmElection_result result = new startSwarmElection_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetTransfers(AsyncCallback callback, object state)
      {
        return send_GetTransfers(callback, state);
      }

      public List<TransferData> End_GetTransfers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetTransfers();
      }

      #endif

      public List<TransferData> GetTransfers()
      {
        #if !SILVERLIGHT
        send_GetTransfers();
        return recv_GetTransfers();

        #else
        var asyncResult = Begin_GetTransfers(null, null);
        return End_GetTransfers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetTransfers(AsyncCallback callback, object state)
      #else
      public void send_GetTransfers()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetTransfers", TMessageType.Call, seqid_));
        GetTransfers_args args = new GetTransfers_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public List<TransferData> recv_GetTransfers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetTransfers_result result = new GetTransfers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetTransfers failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_stop(AsyncCallback callback, object state)
      {
        return send_stop(callback, state);
      }

      public void End_stop(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_stop();
      }

      #endif

      public void stop()
      {
        #if !SILVERLIGHT
        send_stop();
        recv_stop();

        #else
        var asyncResult = Begin_stop(null, null);
        End_stop(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_stop(AsyncCallback callback, object state)
      #else
      public void send_stop()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("stop", TMessageType.Call, seqid_));
        stop_args args = new stop_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_stop()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        stop_result result = new stop_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["GetSwarmList"] = GetSwarmList_Process;
        processMap_["startSwarmElection"] = startSwarmElection_Process;
        processMap_["GetTransfers"] = GetTransfers_Process;
        processMap_["stop"] = stop_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void GetSwarmList_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSwarmList_args args = new GetSwarmList_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSwarmList_result result = new GetSwarmList_result();
        result.Success = iface_.GetSwarmList();
        oprot.WriteMessageBegin(new TMessage("GetSwarmList", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void startSwarmElection_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        startSwarmElection_args args = new startSwarmElection_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        startSwarmElection_result result = new startSwarmElection_result();
        try {
          iface_.startSwarmElection(args.Transfer);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("startSwarmElection", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetTransfers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetTransfers_args args = new GetTransfers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetTransfers_result result = new GetTransfers_result();
        result.Success = iface_.GetTransfers();
        oprot.WriteMessageBegin(new TMessage("GetTransfers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void stop_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        stop_args args = new stop_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        stop_result result = new stop_result();
        iface_.stop();
        oprot.WriteMessageBegin(new TMessage("stop", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSwarmList_args : TBase
    {

      public GetSwarmList_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSwarmList_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSwarmList_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSwarmList_result : TBase
    {
      private List<Swarm> _success;

      public List<Swarm> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetSwarmList_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<Swarm>();
                  TList _list8 = iprot.ReadListBegin();
                  for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                  {
                    Swarm _elem10 = new Swarm();
                    _elem10 = new Swarm();
                    _elem10.Read(iprot);
                    Success.Add(_elem10);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSwarmList_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (Swarm _iter11 in Success)
              {
                _iter11.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSwarmList_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class startSwarmElection_args : TBase
    {
      private TransferID _transfer;

      public TransferID Transfer
      {
        get
        {
          return _transfer;
        }
        set
        {
          __isset.transfer = true;
          this._transfer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transfer;
      }

      public startSwarmElection_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Transfer = new TransferID();
                Transfer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("startSwarmElection_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Transfer != null && __isset.transfer) {
          field.Name = "transfer";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Transfer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("startSwarmElection_args(");
        sb.Append("Transfer: ");
        sb.Append(Transfer== null ? "<null>" : Transfer.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class startSwarmElection_result : TBase
    {
      private NotSwarmMemeber _exc;

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
      }

      public startSwarmElection_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("startSwarmElection_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("startSwarmElection_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTransfers_args : TBase
    {

      public GetTransfers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTransfers_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTransfers_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetTransfers_result : TBase
    {
      private List<TransferData> _success;

      public List<TransferData> Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
      }

      public GetTransfers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.List) {
                {
                  Success = new List<TransferData>();
                  TList _list12 = iprot.ReadListBegin();
                  for( int _i13 = 0; _i13 < _list12.Count; ++_i13)
                  {
                    TransferData _elem14 = new TransferData();
                    _elem14 = new TransferData();
                    _elem14.Read(iprot);
                    Success.Add(_elem14);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetTransfers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.List;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            {
              oprot.WriteListBegin(new TList(TType.Struct, Success.Count));
              foreach (TransferData _iter15 in Success)
              {
                _iter15.Write(oprot);
              }
              oprot.WriteListEnd();
            }
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetTransfers_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class stop_args : TBase
    {

      public stop_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("stop_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("stop_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class stop_result : TBase
    {

      public stop_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("stop_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("stop_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
