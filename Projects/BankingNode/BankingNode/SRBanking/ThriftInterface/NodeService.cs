/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

namespace SRBanking.ThriftInterface
{
  public partial class NodeService {
    public interface Iface {
      /// <summary>
      /// pings node
      /// </summary>
      void Ping();
      #if SILVERLIGHT
      IAsyncResult Begin_Ping(AsyncCallback callback, object state);
      void End_Ping(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// pings Swarm and checks if leader is a leader
      /// </summary>
      /// <param name="leader"></param>
      /// <param name="transfer"></param>
      void PingSwarm(NodeID leader, TransferID transfer);
      #if SILVERLIGHT
      IAsyncResult Begin_PingSwarm(AsyncCallback callback, object state, NodeID leader, TransferID transfer);
      void End_PingSwarm(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarm"></param>
      void UpdateSwarmMembers(Swarm swarm);
      #if SILVERLIGHT
      IAsyncResult Begin_UpdateSwarmMembers(AsyncCallback callback, object state, Swarm swarm);
      void End_UpdateSwarmMembers(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarm"></param>
      void AddToSwarm(Swarm swarm);
      #if SILVERLIGHT
      IAsyncResult Begin_AddToSwarm(AsyncCallback callback, object state, Swarm swarm);
      void End_AddToSwarm(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarm"></param>
      void DelSwarm(Swarm swarm);
      #if SILVERLIGHT
      IAsyncResult Begin_DelSwarm(AsyncCallback callback, object state, Swarm swarm);
      void End_DelSwarm(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// </summary>
      /// <param name="transfer"></param>
      Swarm GetSwarm(TransferID transfer);
      #if SILVERLIGHT
      IAsyncResult Begin_GetSwarm(AsyncCallback callback, object state, TransferID transfer);
      Swarm End_GetSwarm(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// returns true if candidateNodeID> current
      /// </summary>
      /// <param name="cadidate"></param>
      /// <param name="Transfer"></param>
      bool ElectSwarmLeader(NodeID cadidate, TransferID Transfer);
      #if SILVERLIGHT
      IAsyncResult Begin_ElectSwarmLeader(AsyncCallback callback, object state, NodeID cadidate, TransferID Transfer);
      bool End_ElectSwarmLeader(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// new leader broadcast that he is a leader
      /// </summary>
      /// <param name="swarm"></param>
      void ElectionEndedSwarm(Swarm swarm);
      #if SILVERLIGHT
      IAsyncResult Begin_ElectionEndedSwarm(AsyncCallback callback, object state, Swarm swarm);
      void End_ElectionEndedSwarm(IAsyncResult asyncResult);
      #endif
      /// <summary>
      /// 
      /// </summary>
      /// <param name="transfer"></param>
      void MakeTransfer(TransferData transfer);
      #if SILVERLIGHT
      IAsyncResult Begin_MakeTransfer(AsyncCallback callback, object state, TransferData transfer);
      void End_MakeTransfer(IAsyncResult asyncResult);
      #endif
    }

    public class Client : IDisposable, Iface {
      public Client(TProtocol prot) : this(prot, prot)
      {
      }

      public Client(TProtocol iprot, TProtocol oprot)
      {
        iprot_ = iprot;
        oprot_ = oprot;
      }

      protected TProtocol iprot_;
      protected TProtocol oprot_;
      protected int seqid_;

      public TProtocol InputProtocol
      {
        get { return iprot_; }
      }
      public TProtocol OutputProtocol
      {
        get { return oprot_; }
      }


      #region " IDisposable Support "
      private bool _IsDisposed;

      // IDisposable
      public void Dispose()
      {
        Dispose(true);
      }
      

      protected virtual void Dispose(bool disposing)
      {
        if (!_IsDisposed)
        {
          if (disposing)
          {
            if (iprot_ != null)
            {
              ((IDisposable)iprot_).Dispose();
            }
            if (oprot_ != null)
            {
              ((IDisposable)oprot_).Dispose();
            }
          }
        }
        _IsDisposed = true;
      }
      #endregion


      
      #if SILVERLIGHT
      public IAsyncResult Begin_Ping(AsyncCallback callback, object state)
      {
        return send_Ping(callback, state);
      }

      public void End_Ping(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_Ping();
      }

      #endif

      /// <summary>
      /// pings node
      /// </summary>
      public void Ping()
      {
        #if !SILVERLIGHT
        send_Ping();
        recv_Ping();

        #else
        var asyncResult = Begin_Ping(null, null);
        End_Ping(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_Ping(AsyncCallback callback, object state)
      #else
      public void send_Ping()
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("Ping", TMessageType.Call, seqid_));
        Ping_args args = new Ping_args();
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_Ping()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        Ping_result result = new Ping_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_PingSwarm(AsyncCallback callback, object state, NodeID leader, TransferID transfer)
      {
        return send_PingSwarm(callback, state, leader, transfer);
      }

      public void End_PingSwarm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_PingSwarm();
      }

      #endif

      /// <summary>
      /// pings Swarm and checks if leader is a leader
      /// </summary>
      /// <param name="leader"></param>
      /// <param name="transfer"></param>
      public void PingSwarm(NodeID leader, TransferID transfer)
      {
        #if !SILVERLIGHT
        send_PingSwarm(leader, transfer);
        recv_PingSwarm();

        #else
        var asyncResult = Begin_PingSwarm(null, null, leader, transfer);
        End_PingSwarm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_PingSwarm(AsyncCallback callback, object state, NodeID leader, TransferID transfer)
      #else
      public void send_PingSwarm(NodeID leader, TransferID transfer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("PingSwarm", TMessageType.Call, seqid_));
        PingSwarm_args args = new PingSwarm_args();
        args.Leader = leader;
        args.Transfer = transfer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_PingSwarm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        PingSwarm_result result = new PingSwarm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_UpdateSwarmMembers(AsyncCallback callback, object state, Swarm swarm)
      {
        return send_UpdateSwarmMembers(callback, state, swarm);
      }

      public void End_UpdateSwarmMembers(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_UpdateSwarmMembers();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarm"></param>
      public void UpdateSwarmMembers(Swarm swarm)
      {
        #if !SILVERLIGHT
        send_UpdateSwarmMembers(swarm);
        recv_UpdateSwarmMembers();

        #else
        var asyncResult = Begin_UpdateSwarmMembers(null, null, swarm);
        End_UpdateSwarmMembers(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_UpdateSwarmMembers(AsyncCallback callback, object state, Swarm swarm)
      #else
      public void send_UpdateSwarmMembers(Swarm swarm)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("UpdateSwarmMembers", TMessageType.Call, seqid_));
        UpdateSwarmMembers_args args = new UpdateSwarmMembers_args();
        args.Swarm = swarm;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_UpdateSwarmMembers()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        UpdateSwarmMembers_result result = new UpdateSwarmMembers_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        if (result.__isset.exc2) {
          throw result.Exc2;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_AddToSwarm(AsyncCallback callback, object state, Swarm swarm)
      {
        return send_AddToSwarm(callback, state, swarm);
      }

      public void End_AddToSwarm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_AddToSwarm();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarm"></param>
      public void AddToSwarm(Swarm swarm)
      {
        #if !SILVERLIGHT
        send_AddToSwarm(swarm);
        recv_AddToSwarm();

        #else
        var asyncResult = Begin_AddToSwarm(null, null, swarm);
        End_AddToSwarm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_AddToSwarm(AsyncCallback callback, object state, Swarm swarm)
      #else
      public void send_AddToSwarm(Swarm swarm)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("AddToSwarm", TMessageType.Call, seqid_));
        AddToSwarm_args args = new AddToSwarm_args();
        args.Swarm = swarm;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_AddToSwarm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        AddToSwarm_result result = new AddToSwarm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_DelSwarm(AsyncCallback callback, object state, Swarm swarm)
      {
        return send_DelSwarm(callback, state, swarm);
      }

      public void End_DelSwarm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_DelSwarm();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      /// <param name="swarm"></param>
      public void DelSwarm(Swarm swarm)
      {
        #if !SILVERLIGHT
        send_DelSwarm(swarm);
        recv_DelSwarm();

        #else
        var asyncResult = Begin_DelSwarm(null, null, swarm);
        End_DelSwarm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_DelSwarm(AsyncCallback callback, object state, Swarm swarm)
      #else
      public void send_DelSwarm(Swarm swarm)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("DelSwarm", TMessageType.Call, seqid_));
        DelSwarm_args args = new DelSwarm_args();
        args.Swarm = swarm;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_DelSwarm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        DelSwarm_result result = new DelSwarm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        if (result.__isset.exc2) {
          throw result.Exc2;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_GetSwarm(AsyncCallback callback, object state, TransferID transfer)
      {
        return send_GetSwarm(callback, state, transfer);
      }

      public Swarm End_GetSwarm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_GetSwarm();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      /// <param name="transfer"></param>
      public Swarm GetSwarm(TransferID transfer)
      {
        #if !SILVERLIGHT
        send_GetSwarm(transfer);
        return recv_GetSwarm();

        #else
        var asyncResult = Begin_GetSwarm(null, null, transfer);
        return End_GetSwarm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_GetSwarm(AsyncCallback callback, object state, TransferID transfer)
      #else
      public void send_GetSwarm(TransferID transfer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("GetSwarm", TMessageType.Call, seqid_));
        GetSwarm_args args = new GetSwarm_args();
        args.Transfer = transfer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public Swarm recv_GetSwarm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        GetSwarm_result result = new GetSwarm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.exc) {
          throw result.Exc;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "GetSwarm failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ElectSwarmLeader(AsyncCallback callback, object state, NodeID cadidate, TransferID Transfer)
      {
        return send_ElectSwarmLeader(callback, state, cadidate, Transfer);
      }

      public bool End_ElectSwarmLeader(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        return recv_ElectSwarmLeader();
      }

      #endif

      /// <summary>
      /// returns true if candidateNodeID> current
      /// </summary>
      /// <param name="cadidate"></param>
      /// <param name="Transfer"></param>
      public bool ElectSwarmLeader(NodeID cadidate, TransferID Transfer)
      {
        #if !SILVERLIGHT
        send_ElectSwarmLeader(cadidate, Transfer);
        return recv_ElectSwarmLeader();

        #else
        var asyncResult = Begin_ElectSwarmLeader(null, null, cadidate, Transfer);
        return End_ElectSwarmLeader(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ElectSwarmLeader(AsyncCallback callback, object state, NodeID cadidate, TransferID Transfer)
      #else
      public void send_ElectSwarmLeader(NodeID cadidate, TransferID Transfer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ElectSwarmLeader", TMessageType.Call, seqid_));
        ElectSwarmLeader_args args = new ElectSwarmLeader_args();
        args.Cadidate = cadidate;
        args.Transfer = Transfer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public bool recv_ElectSwarmLeader()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ElectSwarmLeader_result result = new ElectSwarmLeader_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.success) {
          return result.Success;
        }
        if (result.__isset.exc) {
          throw result.Exc;
        }
        throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "ElectSwarmLeader failed: unknown result");
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_ElectionEndedSwarm(AsyncCallback callback, object state, Swarm swarm)
      {
        return send_ElectionEndedSwarm(callback, state, swarm);
      }

      public void End_ElectionEndedSwarm(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_ElectionEndedSwarm();
      }

      #endif

      /// <summary>
      /// new leader broadcast that he is a leader
      /// </summary>
      /// <param name="swarm"></param>
      public void ElectionEndedSwarm(Swarm swarm)
      {
        #if !SILVERLIGHT
        send_ElectionEndedSwarm(swarm);
        recv_ElectionEndedSwarm();

        #else
        var asyncResult = Begin_ElectionEndedSwarm(null, null, swarm);
        End_ElectionEndedSwarm(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_ElectionEndedSwarm(AsyncCallback callback, object state, Swarm swarm)
      #else
      public void send_ElectionEndedSwarm(Swarm swarm)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("ElectionEndedSwarm", TMessageType.Call, seqid_));
        ElectionEndedSwarm_args args = new ElectionEndedSwarm_args();
        args.Swarm = swarm;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_ElectionEndedSwarm()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        ElectionEndedSwarm_result result = new ElectionEndedSwarm_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        if (result.__isset.exc) {
          throw result.Exc;
        }
        return;
      }

      
      #if SILVERLIGHT
      public IAsyncResult Begin_MakeTransfer(AsyncCallback callback, object state, TransferData transfer)
      {
        return send_MakeTransfer(callback, state, transfer);
      }

      public void End_MakeTransfer(IAsyncResult asyncResult)
      {
        oprot_.Transport.EndFlush(asyncResult);
        recv_MakeTransfer();
      }

      #endif

      /// <summary>
      /// 
      /// </summary>
      /// <param name="transfer"></param>
      public void MakeTransfer(TransferData transfer)
      {
        #if !SILVERLIGHT
        send_MakeTransfer(transfer);
        recv_MakeTransfer();

        #else
        var asyncResult = Begin_MakeTransfer(null, null, transfer);
        End_MakeTransfer(asyncResult);

        #endif
      }
      #if SILVERLIGHT
      public IAsyncResult send_MakeTransfer(AsyncCallback callback, object state, TransferData transfer)
      #else
      public void send_MakeTransfer(TransferData transfer)
      #endif
      {
        oprot_.WriteMessageBegin(new TMessage("MakeTransfer", TMessageType.Call, seqid_));
        MakeTransfer_args args = new MakeTransfer_args();
        args.Transfer = transfer;
        args.Write(oprot_);
        oprot_.WriteMessageEnd();
        #if SILVERLIGHT
        return oprot_.Transport.BeginFlush(callback, state);
        #else
        oprot_.Transport.Flush();
        #endif
      }

      public void recv_MakeTransfer()
      {
        TMessage msg = iprot_.ReadMessageBegin();
        if (msg.Type == TMessageType.Exception) {
          TApplicationException x = TApplicationException.Read(iprot_);
          iprot_.ReadMessageEnd();
          throw x;
        }
        MakeTransfer_result result = new MakeTransfer_result();
        result.Read(iprot_);
        iprot_.ReadMessageEnd();
        return;
      }

    }
    public class Processor : TProcessor {
      public Processor(Iface iface)
      {
        iface_ = iface;
        processMap_["Ping"] = Ping_Process;
        processMap_["PingSwarm"] = PingSwarm_Process;
        processMap_["UpdateSwarmMembers"] = UpdateSwarmMembers_Process;
        processMap_["AddToSwarm"] = AddToSwarm_Process;
        processMap_["DelSwarm"] = DelSwarm_Process;
        processMap_["GetSwarm"] = GetSwarm_Process;
        processMap_["ElectSwarmLeader"] = ElectSwarmLeader_Process;
        processMap_["ElectionEndedSwarm"] = ElectionEndedSwarm_Process;
        processMap_["MakeTransfer"] = MakeTransfer_Process;
      }

      protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
      private Iface iface_;
      protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

      public bool Process(TProtocol iprot, TProtocol oprot)
      {
        try
        {
          TMessage msg = iprot.ReadMessageBegin();
          ProcessFunction fn;
          processMap_.TryGetValue(msg.Name, out fn);
          if (fn == null) {
            TProtocolUtil.Skip(iprot, TType.Struct);
            iprot.ReadMessageEnd();
            TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
            oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
            x.Write(oprot);
            oprot.WriteMessageEnd();
            oprot.Transport.Flush();
            return true;
          }
          fn(msg.SeqID, iprot, oprot);
        }
        catch (IOException)
        {
          return false;
        }
        return true;
      }

      public void Ping_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        Ping_args args = new Ping_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        Ping_result result = new Ping_result();
        iface_.Ping();
        oprot.WriteMessageBegin(new TMessage("Ping", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void PingSwarm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        PingSwarm_args args = new PingSwarm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        PingSwarm_result result = new PingSwarm_result();
        try {
          iface_.PingSwarm(args.Leader, args.Transfer);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("PingSwarm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void UpdateSwarmMembers_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        UpdateSwarmMembers_args args = new UpdateSwarmMembers_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        UpdateSwarmMembers_result result = new UpdateSwarmMembers_result();
        try {
          iface_.UpdateSwarmMembers(args.Swarm);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        } catch (WrongSwarmLeader exc2) {
          result.Exc2 = exc2;
        }
        oprot.WriteMessageBegin(new TMessage("UpdateSwarmMembers", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void AddToSwarm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        AddToSwarm_args args = new AddToSwarm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        AddToSwarm_result result = new AddToSwarm_result();
        try {
          iface_.AddToSwarm(args.Swarm);
        } catch (AlreadySwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("AddToSwarm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void DelSwarm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        DelSwarm_args args = new DelSwarm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        DelSwarm_result result = new DelSwarm_result();
        try {
          iface_.DelSwarm(args.Swarm);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        } catch (WrongSwarmLeader exc2) {
          result.Exc2 = exc2;
        }
        oprot.WriteMessageBegin(new TMessage("DelSwarm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void GetSwarm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        GetSwarm_args args = new GetSwarm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        GetSwarm_result result = new GetSwarm_result();
        try {
          result.Success = iface_.GetSwarm(args.Transfer);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("GetSwarm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ElectSwarmLeader_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ElectSwarmLeader_args args = new ElectSwarmLeader_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ElectSwarmLeader_result result = new ElectSwarmLeader_result();
        try {
          result.Success = iface_.ElectSwarmLeader(args.Cadidate, args.Transfer);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("ElectSwarmLeader", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void ElectionEndedSwarm_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        ElectionEndedSwarm_args args = new ElectionEndedSwarm_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        ElectionEndedSwarm_result result = new ElectionEndedSwarm_result();
        try {
          iface_.ElectionEndedSwarm(args.Swarm);
        } catch (NotSwarmMemeber exc) {
          result.Exc = exc;
        }
        oprot.WriteMessageBegin(new TMessage("ElectionEndedSwarm", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

      public void MakeTransfer_Process(int seqid, TProtocol iprot, TProtocol oprot)
      {
        MakeTransfer_args args = new MakeTransfer_args();
        args.Read(iprot);
        iprot.ReadMessageEnd();
        MakeTransfer_result result = new MakeTransfer_result();
        iface_.MakeTransfer(args.Transfer);
        oprot.WriteMessageBegin(new TMessage("MakeTransfer", TMessageType.Reply, seqid)); 
        result.Write(oprot);
        oprot.WriteMessageEnd();
        oprot.Transport.Flush();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_args : TBase
    {

      public Ping_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Ping_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Ping_args(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class Ping_result : TBase
    {

      public Ping_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("Ping_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("Ping_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PingSwarm_args : TBase
    {
      private NodeID _leader;
      private TransferID _transfer;

      public NodeID Leader
      {
        get
        {
          return _leader;
        }
        set
        {
          __isset.leader = true;
          this._leader = value;
        }
      }

      public TransferID Transfer
      {
        get
        {
          return _transfer;
        }
        set
        {
          __isset.transfer = true;
          this._transfer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool leader;
        public bool transfer;
      }

      public PingSwarm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Leader = new NodeID();
                Leader.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Transfer = new TransferID();
                Transfer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PingSwarm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Leader != null && __isset.leader) {
          field.Name = "leader";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Leader.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Transfer != null && __isset.transfer) {
          field.Name = "transfer";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Transfer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PingSwarm_args(");
        sb.Append("Leader: ");
        sb.Append(Leader== null ? "<null>" : Leader.ToString());
        sb.Append(",Transfer: ");
        sb.Append(Transfer== null ? "<null>" : Transfer.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class PingSwarm_result : TBase
    {
      private NotSwarmMemeber _exc;

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
      }

      public PingSwarm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("PingSwarm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("PingSwarm_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateSwarmMembers_args : TBase
    {
      private Swarm _swarm;

      public Swarm Swarm
      {
        get
        {
          return _swarm;
        }
        set
        {
          __isset.swarm = true;
          this._swarm = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool swarm;
      }

      public UpdateSwarmMembers_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Swarm = new Swarm();
                Swarm.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateSwarmMembers_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Swarm != null && __isset.swarm) {
          field.Name = "swarm";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Swarm.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateSwarmMembers_args(");
        sb.Append("Swarm: ");
        sb.Append(Swarm== null ? "<null>" : Swarm.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class UpdateSwarmMembers_result : TBase
    {
      private NotSwarmMemeber _exc;
      private WrongSwarmLeader _exc2;

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }

      public WrongSwarmLeader Exc2
      {
        get
        {
          return _exc2;
        }
        set
        {
          __isset.exc2 = true;
          this._exc2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
        public bool exc2;
      }

      public UpdateSwarmMembers_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Exc2 = new WrongSwarmLeader();
                Exc2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("UpdateSwarmMembers_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.exc2) {
          if (Exc2 != null) {
            field.Name = "Exc2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Exc2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("UpdateSwarmMembers_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(",Exc2: ");
        sb.Append(Exc2== null ? "<null>" : Exc2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddToSwarm_args : TBase
    {
      private Swarm _swarm;

      public Swarm Swarm
      {
        get
        {
          return _swarm;
        }
        set
        {
          __isset.swarm = true;
          this._swarm = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool swarm;
      }

      public AddToSwarm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Swarm = new Swarm();
                Swarm.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddToSwarm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Swarm != null && __isset.swarm) {
          field.Name = "swarm";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Swarm.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddToSwarm_args(");
        sb.Append("Swarm: ");
        sb.Append(Swarm== null ? "<null>" : Swarm.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class AddToSwarm_result : TBase
    {
      private AlreadySwarmMemeber _exc;

      public AlreadySwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
      }

      public AddToSwarm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new AlreadySwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("AddToSwarm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("AddToSwarm_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DelSwarm_args : TBase
    {
      private Swarm _swarm;

      public Swarm Swarm
      {
        get
        {
          return _swarm;
        }
        set
        {
          __isset.swarm = true;
          this._swarm = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool swarm;
      }

      public DelSwarm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Swarm = new Swarm();
                Swarm.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DelSwarm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Swarm != null && __isset.swarm) {
          field.Name = "swarm";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Swarm.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DelSwarm_args(");
        sb.Append("Swarm: ");
        sb.Append(Swarm== null ? "<null>" : Swarm.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class DelSwarm_result : TBase
    {
      private NotSwarmMemeber _exc;
      private WrongSwarmLeader _exc2;

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }

      public WrongSwarmLeader Exc2
      {
        get
        {
          return _exc2;
        }
        set
        {
          __isset.exc2 = true;
          this._exc2 = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
        public bool exc2;
      }

      public DelSwarm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Exc2 = new WrongSwarmLeader();
                Exc2.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("DelSwarm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.exc2) {
          if (Exc2 != null) {
            field.Name = "Exc2";
            field.Type = TType.Struct;
            field.ID = 2;
            oprot.WriteFieldBegin(field);
            Exc2.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("DelSwarm_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(",Exc2: ");
        sb.Append(Exc2== null ? "<null>" : Exc2.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSwarm_args : TBase
    {
      private TransferID _transfer;

      public TransferID Transfer
      {
        get
        {
          return _transfer;
        }
        set
        {
          __isset.transfer = true;
          this._transfer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transfer;
      }

      public GetSwarm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Transfer = new TransferID();
                Transfer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSwarm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Transfer != null && __isset.transfer) {
          field.Name = "transfer";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Transfer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSwarm_args(");
        sb.Append("Transfer: ");
        sb.Append(Transfer== null ? "<null>" : Transfer.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class GetSwarm_result : TBase
    {
      private Swarm _success;
      private NotSwarmMemeber _exc;

      public Swarm Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool exc;
      }

      public GetSwarm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new Swarm();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("GetSwarm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        } else if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("GetSwarm_result(");
        sb.Append("Success: ");
        sb.Append(Success== null ? "<null>" : Success.ToString());
        sb.Append(",Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ElectSwarmLeader_args : TBase
    {
      private NodeID _cadidate;
      private TransferID _Transfer;

      public NodeID Cadidate
      {
        get
        {
          return _cadidate;
        }
        set
        {
          __isset.cadidate = true;
          this._cadidate = value;
        }
      }

      public TransferID Transfer
      {
        get
        {
          return _Transfer;
        }
        set
        {
          __isset.Transfer = true;
          this._Transfer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool cadidate;
        public bool Transfer;
      }

      public ElectSwarmLeader_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Cadidate = new NodeID();
                Cadidate.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Struct) {
                Transfer = new TransferID();
                Transfer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ElectSwarmLeader_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Cadidate != null && __isset.cadidate) {
          field.Name = "cadidate";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Cadidate.Write(oprot);
          oprot.WriteFieldEnd();
        }
        if (Transfer != null && __isset.Transfer) {
          field.Name = "Transfer";
          field.Type = TType.Struct;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          Transfer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ElectSwarmLeader_args(");
        sb.Append("Cadidate: ");
        sb.Append(Cadidate== null ? "<null>" : Cadidate.ToString());
        sb.Append(",Transfer: ");
        sb.Append(Transfer== null ? "<null>" : Transfer.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ElectSwarmLeader_result : TBase
    {
      private bool _success;
      private NotSwarmMemeber _exc;

      public bool Success
      {
        get
        {
          return _success;
        }
        set
        {
          __isset.success = true;
          this._success = value;
        }
      }

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool success;
        public bool exc;
      }

      public ElectSwarmLeader_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Bool) {
                Success = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ElectSwarmLeader_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.Bool;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(Success);
          oprot.WriteFieldEnd();
        } else if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ElectSwarmLeader_result(");
        sb.Append("Success: ");
        sb.Append(Success);
        sb.Append(",Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ElectionEndedSwarm_args : TBase
    {
      private Swarm _swarm;

      public Swarm Swarm
      {
        get
        {
          return _swarm;
        }
        set
        {
          __isset.swarm = true;
          this._swarm = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool swarm;
      }

      public ElectionEndedSwarm_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Swarm = new Swarm();
                Swarm.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ElectionEndedSwarm_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Swarm != null && __isset.swarm) {
          field.Name = "swarm";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Swarm.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ElectionEndedSwarm_args(");
        sb.Append("Swarm: ");
        sb.Append(Swarm== null ? "<null>" : Swarm.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class ElectionEndedSwarm_result : TBase
    {
      private NotSwarmMemeber _exc;

      public NotSwarmMemeber Exc
      {
        get
        {
          return _exc;
        }
        set
        {
          __isset.exc = true;
          this._exc = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool exc;
      }

      public ElectionEndedSwarm_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Exc = new NotSwarmMemeber();
                Exc.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("ElectionEndedSwarm_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.exc) {
          if (Exc != null) {
            field.Name = "Exc";
            field.Type = TType.Struct;
            field.ID = 1;
            oprot.WriteFieldBegin(field);
            Exc.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("ElectionEndedSwarm_result(");
        sb.Append("Exc: ");
        sb.Append(Exc== null ? "<null>" : Exc.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MakeTransfer_args : TBase
    {
      private TransferData _transfer;

      public TransferData Transfer
      {
        get
        {
          return _transfer;
        }
        set
        {
          __isset.transfer = true;
          this._transfer = value;
        }
      }


      public Isset __isset;
      #if !SILVERLIGHT
      [Serializable]
      #endif
      public struct Isset {
        public bool transfer;
      }

      public MakeTransfer_args() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Transfer = new TransferData();
                Transfer.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MakeTransfer_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Transfer != null && __isset.transfer) {
          field.Name = "transfer";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Transfer.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MakeTransfer_args(");
        sb.Append("Transfer: ");
        sb.Append(Transfer== null ? "<null>" : Transfer.ToString());
        sb.Append(")");
        return sb.ToString();
      }

    }


    #if !SILVERLIGHT
    [Serializable]
    #endif
    public partial class MakeTransfer_result : TBase
    {

      public MakeTransfer_result() {
      }

      public void Read (TProtocol iprot)
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }

      public void Write(TProtocol oprot) {
        TStruct struc = new TStruct("MakeTransfer_result");
        oprot.WriteStructBegin(struc);

        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }

      public override string ToString() {
        StringBuilder sb = new StringBuilder("MakeTransfer_result(");
        sb.Append(")");
        return sb.ToString();
      }

    }

  }
}
