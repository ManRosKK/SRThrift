#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.1)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:utf8string,new_style
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from SRBanking.ThriftInterface import NodeService
from SRBanking.ThriftInterface.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  void makeTransfer(NodeID receiver, AccountBalanceType value)'
  print '  AccountBalanceType getAccountBalance()'
  print '  void ping()'
  print '  void pingSwarm(NodeID leader, TransferID transfer)'
  print '  void updateSwarmMembers(Swarm swarm)'
  print '  void addToSwarm(Swarm swarm)'
  print '  void delSwarm(Swarm swarm)'
  print '  Swarm getSwarm(TransferID transfer)'
  print '  bool electSwarmLeader(NodeID cadidate, TransferID Transfer)'
  print '  void electionEndedSwarm(Swarm swarm)'
  print '  void deliverTransfer(TransferData transfer)'
  print '   getSwarmList()'
  print '  void startSwarmElection(TransferID transfer)'
  print '   getTransfers()'
  print '  void stop()'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = NodeService.Client(protocol)
transport.open()

if cmd == 'makeTransfer':
  if len(args) != 2:
    print 'makeTransfer requires 2 args'
    sys.exit(1)
  pp.pprint(client.makeTransfer(eval(args[0]),eval(args[1]),))

elif cmd == 'getAccountBalance':
  if len(args) != 0:
    print 'getAccountBalance requires 0 args'
    sys.exit(1)
  pp.pprint(client.getAccountBalance())

elif cmd == 'ping':
  if len(args) != 0:
    print 'ping requires 0 args'
    sys.exit(1)
  pp.pprint(client.ping())

elif cmd == 'pingSwarm':
  if len(args) != 2:
    print 'pingSwarm requires 2 args'
    sys.exit(1)
  pp.pprint(client.pingSwarm(eval(args[0]),eval(args[1]),))

elif cmd == 'updateSwarmMembers':
  if len(args) != 1:
    print 'updateSwarmMembers requires 1 args'
    sys.exit(1)
  pp.pprint(client.updateSwarmMembers(eval(args[0]),))

elif cmd == 'addToSwarm':
  if len(args) != 1:
    print 'addToSwarm requires 1 args'
    sys.exit(1)
  pp.pprint(client.addToSwarm(eval(args[0]),))

elif cmd == 'delSwarm':
  if len(args) != 1:
    print 'delSwarm requires 1 args'
    sys.exit(1)
  pp.pprint(client.delSwarm(eval(args[0]),))

elif cmd == 'getSwarm':
  if len(args) != 1:
    print 'getSwarm requires 1 args'
    sys.exit(1)
  pp.pprint(client.getSwarm(eval(args[0]),))

elif cmd == 'electSwarmLeader':
  if len(args) != 2:
    print 'electSwarmLeader requires 2 args'
    sys.exit(1)
  pp.pprint(client.electSwarmLeader(eval(args[0]),eval(args[1]),))

elif cmd == 'electionEndedSwarm':
  if len(args) != 1:
    print 'electionEndedSwarm requires 1 args'
    sys.exit(1)
  pp.pprint(client.electionEndedSwarm(eval(args[0]),))

elif cmd == 'deliverTransfer':
  if len(args) != 1:
    print 'deliverTransfer requires 1 args'
    sys.exit(1)
  pp.pprint(client.deliverTransfer(eval(args[0]),))

elif cmd == 'getSwarmList':
  if len(args) != 0:
    print 'getSwarmList requires 0 args'
    sys.exit(1)
  pp.pprint(client.getSwarmList())

elif cmd == 'startSwarmElection':
  if len(args) != 1:
    print 'startSwarmElection requires 1 args'
    sys.exit(1)
  pp.pprint(client.startSwarmElection(eval(args[0]),))

elif cmd == 'getTransfers':
  if len(args) != 0:
    print 'getTransfers requires 0 args'
    sys.exit(1)
  pp.pprint(client.getTransfers())

elif cmd == 'stop':
  if len(args) != 0:
    print 'stop requires 0 args'
    sys.exit(1)
  pp.pprint(client.stop())

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
